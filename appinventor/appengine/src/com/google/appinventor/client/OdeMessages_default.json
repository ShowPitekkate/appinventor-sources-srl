{
  "AICompanionMenuItem": "AI Companion",
  "AboutScreenProperties": "AboutScreen",
  "AboutScreenPropertyDescriptions": "Information about the screen. It appears when \"About this Application\" is selected from the system menu. Use it to inform people about your app. In multiple screen apps, each screen has its own AboutScreen info.",
  "AboveRangeEventDescriptions": "Distance has gone above the range.",
  "AboveRangeEventEnabledProperties": "AboveRangeEventEnabled",
  "AboveRangeEventEnabledPropertyDescriptions": "Whether the AboveRange event should fire when the distance goes above the TopOfRange.",
  "AboveRangeEvents": "AboveRange",
  "AccelerationChangedEventDescriptions": "Indicates the acceleration changed in the X, Y, and/or Z dimensions.",
  "AccelerationChangedEvents": "AccelerationChanged",
  "AccelerometerSensorHelpStringComponentPallette": "Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s<sup>2</sup>). The components are: <ul><li> <strong>xAccel</strong>: 0 when the phone is at rest on a flat surface, positive when the phone is tilted to the right (i.e., its left side is raised), and negative when the phone is tilted to the left (i.e., its right size is raised).</li> <li> <strong>yAccel</strong>: 0 when the phone is at rest on a flat surface, positive when its bottom is raised, and negative when its top is raised. </li> <li> <strong>zAccel</strong>: Equal to -9.8 (earth's gravity in meters per second per second when the device is at rest parallel to the ground with the display facing up, 0 when perpendicular to the ground, and +9.8 when facing down. The value can also be affected by accelerating it with or against gravity. </li></ul>",
  "AccentColorProperties": "AccentColor",
  "AccentColorPropertyDescriptions": "This is the accent color used for highlights and other user interface accents.",
  "AcceptConnectionMethodDescriptions": "Accept an incoming connection with the Serial Port Profile (SPP).",
  "AcceptConnectionMethods": "AcceptConnection",
  "AcceptConnectionWithUUIDMethodDescriptions": "Accept an incoming connection with a specific UUID.",
  "AcceptConnectionWithUUIDMethods": "AcceptConnectionWithUUID",
  "AccuracyProperties": "Accuracy",
  "AccuracyPropertyDescriptions": "The most recent measure of accuracy, in meters. If no value is available, 0 will be returned.",
  "ActionBarProperties": "ActionBar",
  "ActionBarPropertyDescriptions": "",
  "ActionProperties": "Action",
  "ActionPropertyDescriptions": "Returns the action that will be used to start the activity.",
  "ActivityCanceledEventDescriptions": "Event raised if this ActivityStarter returns because the activity was canceled.",
  "ActivityCanceledEvents": "ActivityCanceled",
  "ActivityClassProperties": "ActivityClass",
  "ActivityClassPropertyDescriptions": "Returns the class part of the specific component that will be started.",
  "ActivityPackageProperties": "ActivityPackage",
  "ActivityPackagePropertyDescriptions": "Returns the package part of the specific component that will be started.",
  "ActivityStarterHelpStringComponentPallette": "A component that can launch an activity using the <code>StartActivity</code> method. <p>Activities that can be launched include:<ul> <li> Starting another App Inventor for Android app. To do so, first find out the <em>class</em> of the other application by downloading the source code and using a file explorer or unzip utility to find a file named \"youngandroidproject/project.properties\". The first line of the file will start with \"main=\" and be followed by the class name; for example, <code>main=com.gmail.Bitdiddle.Ben.HelloPurr.Screen1</code>. (The first components indicate that it was created by Ben.Bitdiddle@gmail.com.) To make your <code>ActivityStarter</code> launch this application, set the following properties: <ul> <li> <code>ActivityPackage</code> to the class name, dropping the last component (for example, <code>com.gmail.Bitdiddle.Ben.HelloPurr</code>)</li> <li> <code>ActivityClass</code> to the entire class name (for example, <code>com.gmail.Bitdiddle.Ben.HelloPurr.Screen1</code>)</li> </ul></li> <li> Starting the camera application by setting the following properties:<ul> <li> <code>Action: android.intent.action.MAIN</code> </li> <li> <code>ActivityPackage: com.android.camera</code> </li> <li> <code>ActivityClass: com.android.camera.Camera</code></li> </ul></li><li> Performing web search. Assuming the term you want to search for is \"vampire\" (feel free to substitute your own choice), set the properties to:<ul><code> <li>Action: android.intent.action.WEB_SEARCH</li> <li>ExtraKey: query</li> <li>ExtraValue: vampire</li> <li>ActivityPackage: com.google.android.providers.enhancedgooglesearch</li> <li>ActivityClass: com.google.android.providers.enhancedgooglesearch.Launcher</li> </code></ul></li> <li> Opening a browser to a specified web page. Assuming the page you want to go to is \"www.facebook.com\" (feel free to substitute your own choice), set the properties to:<ul><code> <li>Action: android.intent.action.VIEW</li> <li>DataUri: http://www.facebook.com</li> </code> </ul> </li> </ul></p>",
  "AddDaysMethodDescriptions": "An instant in time some days after the argument",
  "AddDaysMethods": "AddDays",
  "AddDurationMethodDescriptions": "An instant in time some duration after the argument",
  "AddDurationMethods": "AddDuration",
  "AddHoursMethodDescriptions": "An instant in time some hours after the argument",
  "AddHoursMethods": "AddHours",
  "AddMinutesMethodDescriptions": "An instant in time some minutes after the argument",
  "AddMinutesMethods": "AddMinutes",
  "AddMonthsMethodDescriptions": "An instant in time some months after the argument",
  "AddMonthsMethods": "AddMonths",
  "AddSecondsMethodDescriptions": "An instant in time some seconds after the argument",
  "AddSecondsMethods": "AddSeconds",
  "AddWeeksMethodDescriptions": "An instant in time some weeks after the argument",
  "AddWeeksMethods": "AddWeeks",
  "AddYearsMethodDescriptions": "An instant in time some years after the argument",
  "AddYearsMethods": "AddYears",
  "AddressesAndNamesProperties": "AddressesAndNames",
  "AddressesAndNamesPropertyDescriptions": "The addresses and names of paired Bluetooth devices",
  "AfterActivityEventDescriptions": "Event raised after this ActivityStarter returns.",
  "AfterActivityEvents": "AfterActivity",
  "AfterChoosingEventDescriptions": "Event after the user has made a selection for ShowChooseDialog.",
  "AfterChoosingEvents": "AfterChoosing",
  "AfterDateSetEventDescriptions": "Event that runs after the user chooses a Date in the dialog",
  "AfterDateSetEvents": "AfterDateSet",
  "AfterFileSavedEventDescriptions": "Event indicating that the contents of the file have been written.",
  "AfterFileSavedEvents": "AfterFileSaved",
  "AfterGettingTextEventDescriptions": "Simple event to raise after the VoiceReco activity has returned. Partial is 'false' when SpeechRecognizer stops automatically after listening, else it is 'true' if SpeechRecognizer returns partial results.",
  "AfterGettingTextEvents": "AfterGettingText",
  "AfterPickingEventDescriptions": "Event to be raised after the picker activity returns its result and the properties have been filled in.",
  "AfterPickingEvents": "AfterPicking",
  "AfterPictureEventDescriptions": "Indicates that a photo was taken with the camera and provides the path to the stored picture.",
  "AfterPictureEvents": "AfterPicture",
  "AfterRecordingEventDescriptions": "Indicates that a video was recorded with the camera and provides the path to the stored picture.",
  "AfterRecordingEvents": "AfterRecording",
  "AfterScanEventDescriptions": "Indicates that the scanner has read a (text) result and provides the result",
  "AfterScanEvents": "AfterScan",
  "AfterSelectingEventDescriptions": "Event called after the user selects an item from the dropdown list.",
  "AfterSelectingEvents": "AfterSelecting",
  "AfterSoundRecordedEventDescriptions": "Provides the location of the newly created sound.",
  "AfterSoundRecordedEvents": "AfterSoundRecorded",
  "AfterSpeakingEventDescriptions": "Event to raise after the message is spoken.",
  "AfterSpeakingEvents": "AfterSpeaking",
  "AfterTextInputEventDescriptions": "Event raised after the user has responded to ShowTextDialog.",
  "AfterTextInputEvents": "AfterTextInput",
  "AfterTimeSetEventDescriptions": "This event is run when a user has set the time in the popup dialog.",
  "AfterTimeSetEvents": "AfterTimeSet",
  "AlignHorizontalProperties": "AlignHorizontal",
  "AlignHorizontalPropertyDescriptions": "A number that encodes how contents of the VerticalScrollArrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = right aligned, 3 = horizontally centered. Alignment has no effect if the arrangement's width is automatic.",
  "AlignVerticalProperties": "AlignVertical",
  "AlignVerticalPropertyDescriptions": "A number that encodes how the contents of the VerticalScrollArrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement's height is automatic.",
  "AllowCookiesProperties": "AllowCookies",
  "AllowCookiesPropertyDescriptions": "Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater.",
  "AltitudeProperties": "Altitude",
  "AltitudePropertyDescriptions": "The most recently available altitude value, in meters. If no value is available, 0 will be returned.",
  "AnchorHorizontalProperties": "AnchorHorizontal",
  "AnchorHorizontalPropertyDescriptions": "The horizontal alignment property controls where the Marker's anchor is located relative to its width.",
  "AnchorVerticalProperties": "AnchorVertical",
  "AnchorVerticalPropertyDescriptions": "The vertical alignment property controls where the Marker's anchor is located relative to its height.",
  "AngleProperties": "Angle",
  "AnglePropertyDescriptions": "<p>Angle property getter method (read-only property). Specifically, this provides the angle in which the orientation sensor is tilted, treating",
  "AnimationProperties": "Animation",
  "AnimationPropertyDescriptions": "This is a limited form of animation that can attach a small number of motion types to images. The allowable motions are ScrollRightSlow, ScrollRight, ScrollRightFast, ScrollLeftSlow, ScrollLeft, ScrollLeftFast, and Stop",
  "ApiKeyProperties": "ApiKey",
  "ApiKeyPropertyDescriptions": "Setter for the app developer's API key.",
  "AppNameProperties": "AppName",
  "AppNamePropertyDescriptions": "This is the display name of the installed application in the phone.If the AppName is blank, it will be set to the name of the project when the project is built.",
  "AppearancePropertyCategory": "Appearance",
  "AppendToFileMethodDescriptions": "Appends text to the end of a file storage, creating the file if it does not exist. See the help text under SaveFile for information about where files are written.",
  "AppendToFileMethods": "AppendToFile",
  "AppendValueMethodDescriptions": "Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.",
  "AppendValueMethods": "AppendValue",
  "AppendValueToListMethodDescriptions": "Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.",
  "AppendValueToListMethods": "AppendValueToList",
  "AskForPermissionMethodDescriptions": "Ask the user to grant access to a dangerous permission.",
  "AskForPermissionMethods": "AskForPermission",
  "AuthorizeMethodDescriptions": "Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don't already have authorization.",
  "AuthorizeMethods": "Authorize",
  "AvailableCountriesProperties": "AvailableCountries",
  "AvailableCountriesPropertyDescriptions": "List of the country codes available on this device for use with TextToSpeech. Check the Android developer documentation under supported languages to find the meanings of these abbreviations.",
  "AvailableLanguagesProperties": "AvailableLanguages",
  "AvailableLanguagesPropertyDescriptions": "List of the languages available on this device for use with TextToSpeech. Check the Android developer documentation under supported languages to find the meanings of these abbreviations.",
  "AvailableProperties": "Available",
  "AvailablePropertyDescriptions": "Reports whether or not the device has a proximity sensor",
  "AvailableProvidersProperties": "AvailableProviders",
  "AvailableProvidersPropertyDescriptions": "",
  "AzimuthProperties": "Azimuth",
  "AzimuthPropertyDescriptions": "Azimuth property getter method (read-only property). <p>To return meaningful values the sensor must be enabled.</p>",
  "BackPressedEventDescriptions": "Device back button pressed.",
  "BackPressedEvents": "BackPressed",
  "BackgroundColorProperties": "BackgroundColor",
  "BackgroundColorPropertyDescriptions": "Returns the background color of the VerticalScrollArrangement",
  "BackgroundImageProperties": "BackgroundImage",
  "BackgroundImagePropertyDescriptions": "The screen background image.",
  "BallHelpStringComponentPallette": "<p>A round 'sprite' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite</code>s and other <code>Ball</code>s) and the edge of the Canvas, and move according to its property values.</p><p>For example, to have a <code>Ball</code> move 4 pixels toward the top of a <code>Canvas</code> every 500 milliseconds (half second), you would set the <code>Speed</code> property to 4 [pixels], the <code>Interval</code> property to 500 [milliseconds], the <code>Heading</code> property to 90 [degrees], and the <code>Enabled</code> property to <code>True</code>. These and its other properties can be changed at any time.</p><p>The difference between a Ball and an <code>ImageSprite</code> is that the latter can get its appearance from an image file, while a Ball's appearance can only be changed by varying its <code>PaintColor</code> and <code>Radius</code> properties.</p>",
  "BallotOptionsProperties": "BallotOptions",
  "BallotOptionsPropertyDescriptions": "The list of ballot options.",
  "BallotQuestionProperties": "BallotQuestion",
  "BallotQuestionPropertyDescriptions": "The question to be voted on.",
  "BarcodeScannerHelpStringComponentPallette": "Component for using the Barcode Scanner to read a barcode",
  "BearingToFeatureMethodDescriptions": "Returns the bearing from the Marker to the given map feature, in degrees from due north. If the centroids parameter is true, the bearing will be to the center of the map feature. Otherwise, the bearing will be computed to the point in the feature nearest the Marker.",
  "BearingToFeatureMethods": "BearingToFeature",
  "BearingToPointMethodDescriptions": "Returns the bearing from the Marker to the given latitude and longitude, in degrees from due north.",
  "BearingToPointMethods": "BearingToPoint",
  "BeforeGettingTextEventDescriptions": "Simple event to raise when VoiceReco is invoked but before the VoiceReco activity is started.",
  "BeforeGettingTextEvents": "BeforeGettingText",
  "BeforePickingEventDescriptions": "Event to raise when the ContactPicker is clicked or the list is shown using the Open block. This event occurs before the list of items is displayed, and can be used to prepare the list before it is shown.",
  "BeforePickingEvents": "BeforePicking",
  "BeforeSpeakingEventDescriptions": "Event to raise when Speak is invoked, before the message is spoken.",
  "BeforeSpeakingEvents": "BeforeSpeaking",
  "BehaviorPropertyCategory": "Behavior",
  "BelowRangeEventDescriptions": "Distance has gone below the range.",
  "BelowRangeEventEnabledProperties": "BelowRangeEventEnabled",
  "BelowRangeEventEnabledPropertyDescriptions": "Whether the BelowRange event should fire when the distance goes below the BottomOfRange.",
  "BelowRangeEvents": "BelowRange",
  "BlocksToolkitProperties": "BlocksToolkit",
  "BlocksToolkitPropertyDescriptions": "A JSON string representing the subset for the screen",
  "BluetoothClientHelpStringComponentPallette": "Bluetooth client component",
  "BluetoothClientProperties": "BluetoothClient",
  "BluetoothClientPropertyDescriptions": "The BluetoothClient component that should be used for communication.",
  "BluetoothServerHelpStringComponentPallette": "Bluetooth server component",
  "BottomOfRangeProperties": "BottomOfRange",
  "BottomOfRangePropertyDescriptions": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.",
  "BounceMethodDescriptions": "Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.",
  "BounceMethods": "Bounce",
  "BoundingBoxProperties": "BoundingBox",
  "BoundingBoxPropertyDescriptions": "Bounding box for the map stored as [[North, West], [South, East]].",
  "BoundsChangeEventDescriptions": "User has changed the map bounds by panning or zooming the map.",
  "BoundsChangeEvents": "BoundsChange",
  "BoundsMethodDescriptions": "Returns the bounding box of the Rectangle in the format ((North West) (South East)).",
  "BoundsMethods": "Bounds",
  "BuildPostDataMethods": "BuildPostData",
  "BuildRequestDataMethodDescriptions": "Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText.",
  "BuildRequestDataMethods": "BuildRequestData",
  "ButtonHelpStringComponentPallette": "Button with the ability to detect clicks. Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled</code>), can be changed in the Designer or in the Blocks Editor.",
  "BytesAvailableToReceiveMethodDescriptions": "Returns an estimate of the number of bytes that can be received without blocking",
  "BytesAvailableToReceiveMethods": "BytesAvailableToReceive",
  "CalibrateStrideLengthProperties": "CalibrateStrideLength",
  "CalibrateStrideLengthPropertyDescriptions": "",
  "CalibrationFailedEventDescriptions": "Event for CalibrationFailed",
  "CalibrationFailedEvents": "CalibrationFailed",
  "CamcorderHelpStringComponentPallette": "A component to record a video using the device's camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.",
  "CameraHelpStringComponentPallette": "A component to take a picture using the device's camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.",
  "CanGoBackMethodDescriptions": "Returns true if the WebViewer can go back in the history list.",
  "CanGoBackMethods": "CanGoBack",
  "CanGoForwardMethodDescriptions": "Returns true if the WebViewer can go forward in the history list.",
  "CanGoForwardMethods": "CanGoForward",
  "CanvasHelpStringComponentPallette": "<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.</p> <p>The <code>BackgroundColor</code>, <code>PaintColor</code>, <code>BackgroundImage</code>, <code>Width</code>, and <code>Height</code> of the Canvas can be set in either the Designer or in the Blocks Editor. The <code>Width</code> and <code>Height</code> are measured in pixels and must be positive.</p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas</li><li>Y is the number of pixels away from the top edge of the Canvas</li></ul>.</p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite</code> (<code>ImageSprite</code> or <code>Ball</code>) has been dragged. There are also methods for drawing points, lines, and circles.</p>",
  "CenterFromStringProperties": "CenterFromString",
  "CenterFromStringPropertyDescriptions": "<p>Set the initial center coordinate of the map. The value is specified as a comma-separated pair of decimal latitude and longitude coordinates, for example, <code>42.359144, -71.093612</code>.</p><p>In blocks code, it is recommended for performance reasons to use SetCenter with numerical latitude and longitude rather than convert to the string representation for use with this property.</p>",
  "CenterMethodDescriptions": "Returns the center of the Rectangle as a list of the form (Latitude Longitude).",
  "CenterMethods": "Center",
  "CentroidMethodDescriptions": "Returns the centroid of the Polygon as a (latitude, longitude) pair.",
  "CentroidMethods": "Centroid",
  "ChangedEventDescriptions": "Default Changed event handler.",
  "ChangedEvents": "Changed",
  "CharacterEncodingProperties": "CharacterEncoding",
  "CharacterEncodingPropertyDescriptions": "Sets the character encoding to use when sending and receiving text.",
  "CheckAuthorizedMethodDescriptions": "Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.",
  "CheckAuthorizedMethods": "CheckAuthorized",
  "CheckBoxHelpStringComponentPallette": "Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.",
  "CheckedProperties": "Checked",
  "CheckedPropertyDescriptions": "Returns true if the checkbox is checked.",
  "ChoosingCanceledEventDescriptions": "Event raised when the user canceled ShowChooseDialog.",
  "ChoosingCanceledEvents": "ChoosingCanceled",
  "CircleHelpStringComponentPallette": "Circle",
  "ClearAllMethodDescriptions": "Clear the entire data store",
  "ClearAllMethods": "ClearAll",
  "ClearCachesMethodDescriptions": "Clear WebView caches.",
  "ClearCachesMethods": "ClearCaches",
  "ClearCookiesMethodDescriptions": "Clears all cookies for this Web component.",
  "ClearCookiesMethods": "ClearCookies",
  "ClearLocationsMethodDescriptions": "Clear stored location permissions.",
  "ClearLocationsMethods": "ClearLocations",
  "ClearMethodDescriptions": "Clears anything drawn on this Canvas but not any background color or image.",
  "ClearMethods": "Clear",
  "ClearTagMethodDescriptions": "Clear the entry with the given tag",
  "ClearTagMethods": "ClearTag",
  "ClickEventDescriptions": "The user clicked on the Rectangle.",
  "ClickEvents": "Click",
  "ClockHelpStringComponentPallette": "<p>Non-visible component that provides the instant in time using the internal clock on the phone. It can fire a timer at regularly set intervals and perform time calculations, manipulations, and conversions.</p> <p>Methods to convert an instant to text are also available. Acceptable patterns are empty string, MM/DD/YYYY HH:mm:ss a, or MMM d, yyyyHH:mm. The empty string will provide the default format, which is \"MMM d, yyyy HH:mm:ss a\" for FormatDateTime \"MMM d, yyyy\" for FormatDate. To see all possible format, please see <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" _target=\"_blank\">here</a>. </p>",
  "CloseScreenAnimationMethods": "CloseScreenAnimation",
  "CloseScreenAnimationProperties": "CloseScreenAnimation",
  "CloseScreenAnimationPropertyDescriptions": "The animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none",
  "CloudConnectedMethodDescriptions": "returns True if we are on the network and will likely be able to connect to the CloudDB server.",
  "CloudConnectedMethods": "CloudConnected",
  "CloudDBErrorEventDescriptions": "Indicates that an error occurred while communicating with the CloudDB Redis server.",
  "CloudDBErrorEvents": "CloudDBError",
  "CloudDBHelpStringComponentPallette": "Non-visible component allowing you to store data on a Internet connected database server (using Redis software). This allows the users of your App to share data with each other. By default data will be stored in a server maintained by MIT, however you can setup and run your own server. Set the \"RedisServer\" property and \"RedisPort\" Property to access your own server.",
  "CollidedWithEventDescriptions": "Handler for CollidedWith events, called when two sprites collide. Note that checking for collisions with a rotated ImageSprite currently checks against the sprite's unrotated position. Therefore, collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.",
  "CollidedWithEvents": "CollidedWith",
  "CollidingWithMethodDescriptions": "Indicates whether a collision has been registered between this sprite and the passed sprite.",
  "CollidingWithMethods": "CollidingWith",
  "ColorChangedEventDescriptions": "Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False.",
  "ColorChangedEventEnabledProperties": "ColorChangedEventEnabled",
  "ColorChangedEventEnabledPropertyDescriptions": "Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes.",
  "ColorChangedEvents": "ColorChanged",
  "ColorLeftProperties": "ColorLeft",
  "ColorLeftPropertyDescriptions": "The color of slider to the left of the thumb.",
  "ColorRightProperties": "ColorRight",
  "ColorRightPropertyDescriptions": "The color of slider to the left of the thumb.",
  "ColumnsProperties": "Columns",
  "ColumnsPropertyDescriptions": "Columns property getter method.",
  "CompletedEventDescriptions": "Indicates that the video has reached the end",
  "CompletedEvents": "Completed",
  "ConnectMethodDescriptions": "Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.",
  "ConnectMethods": "Connect",
  "ConnectWithUUIDMethodDescriptions": "Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.",
  "ConnectWithUUIDMethods": "ConnectWithUUID",
  "ConnectionAcceptedEventDescriptions": "Indicates that a bluetooth connection has been accepted.",
  "ConnectionAcceptedEvents": "ConnectionAccepted",
  "ConsumerKeyProperties": "ConsumerKey",
  "ConsumerKeyPropertyDescriptions": "ConsumerKey property getter method.",
  "ConsumerSecretProperties": "ConsumerSecret",
  "ConsumerSecretPropertyDescriptions": "ConsumerSecret property getter method.",
  "ContactNameProperties": "ContactName",
  "ContactNamePropertyDescriptions": "Name property getter method.",
  "ContactPickerHelpStringComponentPallette": "A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact's name </li> <li> <code>EmailAddress</code>: the contact's primary email address </li> <li> <code>ContactUri</code>: the contact's URI on the device </li><li> <code>EmailAddressList</code>: a list of the contact's email addresses </li> <li> <code>PhoneNumber</code>: the contact's primary phone number (on Later Android Verisons)</li> <li> <code>PhoneNumberList</code>: a list of the contact's phone numbers (on Later Android Versions)</li> <li> <code>Picture</code>: the name of the file containing the contact's image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The ContactPicker component might not work on all phones. For example, on Android systems before system 3.0, it cannot pick phone numbers, and the list of email addresses will contain only one email.",
  "ContactUriProperties": "ContactUri",
  "ContactUriPropertyDescriptions": "URI that specifies the location of the contact on the device.",
  "CountryProperties": "Country",
  "CountryPropertyDescriptions": "Country code to use for speech generation. This can affect the pronounciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.",
  "CreateMarkerMethodDescriptions": "Create a new marker with default properties at the specified latitude and longitude.",
  "CreateMarkerMethods": "CreateMarker",
  "CurrentAddressProperties": "CurrentAddress",
  "CurrentAddressPropertyDescriptions": "Provides a textual representation of the current address or \"No address available\".",
  "CurrentPageTitleProperties": "CurrentPageTitle",
  "CurrentPageTitlePropertyDescriptions": "Title of the page currently viewed",
  "CurrentUrlProperties": "CurrentUrl",
  "CurrentUrlPropertyDescriptions": "URL of the page currently viewed. This could be different from the Home URL if new pages were visited by following links.",
  "DataChangedEventDescriptions": "Indicates that the data in the Firebase has changed. Launches an event with the tag and value that have been updated.",
  "DataChangedEvents": "DataChanged",
  "DataTypeProperties": "DataType",
  "DataTypePropertyDescriptions": "Returns the MIME type to pass to the activity.",
  "DataUriProperties": "DataUri",
  "DataUriPropertyDescriptions": "Returns the data URI that will be used to start the activity.",
  "DatePickerHelpStringComponentPallette": "<p>A button that, when clicked on, launches a popup dialog to allow the user to select a date.</p>",
  "DayOfMonthMethodDescriptions": "The day of the month",
  "DayOfMonthMethods": "DayOfMonth",
  "DayProperties": "Day",
  "DayPropertyDescriptions": "the Day of the month that was last picked using the DatePicker.",
  "DeAuthorizeMethodDescriptions": "Removes Twitter authorization from this running app instance",
  "DeAuthorizeMethods": "DeAuthorize",
  "DefaultRedisServerProperties": "DefaultRedisServer",
  "DefaultRedisServerPropertyDescriptions": "The Default Redis Server to use.",
  "DefaultURLProperties": "DefaultURL",
  "DefaultURLPropertyDescriptions": "",
  "DeleteFileMethodDescriptions": "Delete a file on the robot.",
  "DeleteFileMethods": "DeleteFile",
  "DeleteMethodDescriptions": "Performs an HTTP DELETE request using the Url property and retrieves the response.<br> If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br> If the SaveResponse property is false, the GotText event will be triggered.",
  "DeleteMethods": "Delete",
  "DelimiterByteProperties": "DelimiterByte",
  "DelimiterBytePropertyDescriptions": "Sets the delimiter byte to use when passing a negative number for the numberOfBytes parameter when calling ReceiveText, ReceiveSignedBytes, or ReceiveUnsignedBytes.",
  "DescriptionProperties": "Description",
  "DescriptionPropertyDescriptions": "The description displayed in the info window that appears when the user clicks on the Rectangle.",
  "DetectColorProperties": "DetectColor",
  "DetectColorPropertyDescriptions": "Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur.",
  "DeveloperBucketProperties": "DeveloperBucket",
  "DeveloperBucketPropertyDescriptions": "Getter for the DeveloperBucket.",
  "DirectMessageMethodDescriptions": "This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. <p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>",
  "DirectMessageMethods": "DirectMessage",
  "DirectMessagesProperties": "DirectMessages",
  "DirectMessagesPropertyDescriptions": "This property contains a list of the most recent messages mentioning the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>Authorized</code> event.</li> <li> Call the <code>RequestDirectMessages</code> method.</li> <li> Wait for the <code>DirectMessagesReceived</code> event.</li></ol>The value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to <code>RequestDirectMessages</code>).",
  "DirectMessagesReceivedEventDescriptions": "This event is raised when the recent messages requested through <code>RequestDirectMessages</code> have been retrieved. A list of the messages can then be found in the <code>messages</code> parameter or the <code>Messages</code> property.",
  "DirectMessagesReceivedEvents": "DirectMessagesReceived",
  "DisconnectMethodDescriptions": "Disconnect from the connected Bluetooth device.",
  "DisconnectMethods": "Disconnect",
  "DismissProgressDialogMethodDescriptions": "Dismiss a previously displayed ProgressDialog box",
  "DismissProgressDialogMethods": "DismissProgressDialog",
  "DisplayDropdownMethodDescriptions": "displays the dropdown list for selection, same action as when the user clicks on the spinner.",
  "DisplayDropdownMethods": "DisplayDropdown",
  "DistanceIntervalProperties": "DistanceInterval",
  "DistanceIntervalPropertyDescriptions": "Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance.",
  "DistanceProperties": "Distance",
  "DistancePropertyDescriptions": "Returns the distance from the object to the device",
  "DistanceToFeatureMethodDescriptions": "Compute the distance, in meters, between two map features.",
  "DistanceToFeatureMethods": "DistanceToFeature",
  "DistanceToPointMethodDescriptions": "Compute the distance, in meters, between a Rectangle and a latitude, longitude point.",
  "DistanceToPointMethods": "DistanceToPoint",
  "DoQueryMethodDescriptions": "DEPRECATED. This block is deprecated as of the end of 2012. Use SendQuery.",
  "DoQueryMethods": "DoQuery",
  "DoScanMethodDescriptions": "Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.",
  "DoScanMethods": "DoScan",
  "DoubleTapAtPointEventDescriptions": "The user double-tapped at a point on the map. This event will be followed by a ZoomChanged event if zooming gestures are enabled and the map is not at the highest possible zoom level.",
  "DoubleTapAtPointEvents": "DoubleTapAtPoint",
  "DownloadFileMethodDescriptions": "Download a file to the robot.",
  "DownloadFileMethods": "DownloadFile",
  "DragEventDescriptions": "The user dragged the Rectangle.",
  "DragEvents": "Drag",
  "DraggableProperties": "Draggable",
  "DraggablePropertyDescriptions": "The Draggable property is used to set whether or not the user can drag the Rectangle by long-pressing and then dragging the Rectangle to a new location.",
  "DraggedEventDescriptions": "Handler for Dragged events. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the Sprite won't actually move anywhere in response to the Dragged event unless MoveTo is specifically called.",
  "DraggedEvents": "Dragged",
  "DrawArcMethodDescriptions": "Draw an arc on Canvas, by drawing an arc from a specified oval (specified by left, top, right & bottom). Start angle is 0 when heading to the right, and increase when rotate clockwise. When useCenter is true, a sector will be drawed instead of an arc. When fill is true, a filled arc (or sector) will be drawed instead of just an outline.",
  "DrawArcMethods": "DrawArc",
  "DrawCircleMethodDescriptions": "Draw a circle on the screen.",
  "DrawCircleMethods": "DrawCircle",
  "DrawIconMethodDescriptions": "Draw a built-in icon on screen.",
  "DrawIconMethods": "DrawIcon",
  "DrawLineMethodDescriptions": "Draw a line on the screen.",
  "DrawLineMethods": "DrawLine",
  "DrawPointMethodDescriptions": "Draw a point on the screen.",
  "DrawPointMethods": "DrawPoint",
  "DrawRectMethodDescriptions": "Draw a rectangle on the screen.",
  "DrawRectMethods": "DrawRect",
  "DrawShapeMethodDescriptions": "Draws a shape on the canvas. pointList should be a list contains sub-lists with two number which represents a coordinate. The first point and last point does not need to be the same. e.g. ((x1 y1) (x2 y2) (x3 y3)) When fill is true, the shape will be filled.",
  "DrawShapeMethods": "DrawShape",
  "DrawTextAtAngleMethodDescriptions": "Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.",
  "DrawTextAtAngleMethods": "DrawTextAtAngle",
  "DrawTextMethodDescriptions": "Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.",
  "DrawTextMethods": "DrawText",
  "DriveMotorsProperties": "DriveMotors",
  "DriveMotorsPropertyDescriptions": "The motor ports that are used for driving: the left wheel's motor port followed by the right wheel's motor port.",
  "DurationMethodDescriptions": "Milliseconds elapsed between instants",
  "DurationMethods": "Duration",
  "DurationToDaysMethodDescriptions": "convert duration to days",
  "DurationToDaysMethods": "DurationToDays",
  "DurationToHoursMethodDescriptions": "convert duration to hours",
  "DurationToHoursMethods": "DurationToHours",
  "DurationToMinutesMethodDescriptions": "convert duration to minutes",
  "DurationToMinutesMethods": "DurationToMinutes",
  "DurationToSecondsMethodDescriptions": "convert duration to seconds",
  "DurationToSecondsMethods": "DurationToSeconds",
  "DurationToWeeksMethodDescriptions": "convert duration to weeks",
  "DurationToWeeksMethods": "DurationToWeeks",
  "EastLongitudeProperties": "EastLongitude",
  "EastLongitudePropertyDescriptions": "",
  "EdgeReachedEventDescriptions": "Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached. Edge here is represented as an integer that indicates one of eight directions north(1), northeast(2), east(3), southeast(4), south (-1), southwest(-2), west(-3), and northwest(-4).",
  "EdgeReachedEvents": "EdgeReached",
  "ElapsedTimeProperties": "ElapsedTime",
  "ElapsedTimePropertyDescriptions": "Time elapsed in milliseconds since the pedometer was started.",
  "ElementsFromStringProperties": "ElementsFromString",
  "ElementsFromStringPropertyDescriptions": "sets the Spinner list to the elements passed in the comma-separated string",
  "ElementsProperties": "Elements",
  "ElementsPropertyDescriptions": "returns a list of text elements to be picked from.",
  "EmailAddressListProperties": "EmailAddressList",
  "EmailAddressListPropertyDescriptions": "EmailAddressList property getter method.",
  "EmailAddressProperties": "EmailAddress",
  "EmailAddressPropertyDescriptions": "EmailAddress property getter method.",
  "EmailPickerHelpStringComponentPallette": "An EmailPicker is a kind of text box. If the user begins entering the name or email address of a contact, the phone will show a dropdown menu of choices that complete the entry. If there are many contacts, the dropdown can take several seconds to appear, and can show intermediate results while the matches are being computed. <p>The initial contents of the text box and the contents< after user entry is in the <code>Text</code> property. If the <code>Text</code> property is initially empty, the contents of the <code>Hint</code> property will be faintly shown in the text box as a hint to the user.</p> <p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes like this are usually used with <code>Button</code> components, with the user clicking on the button when text entry is complete.",
  "EnableInfoboxProperties": "EnableInfobox",
  "EnableInfoboxPropertyDescriptions": "Enable or disable the infobox window display when the user taps the Rectangle.",
  "EnablePanProperties": "EnablePan",
  "EnablePanPropertyDescriptions": "Enable two-finger panning of the Map",
  "EnableRotationProperties": "EnableRotation",
  "EnableRotationPropertyDescriptions": "Enable rotating the map based on the user's orientation.",
  "EnableSpeedRegulationProperties": "EnableSpeedRegulation",
  "EnableSpeedRegulationPropertyDescriptions": "Specifies whether to keep motor rotation at constant speed.",
  "EnableZoomProperties": "EnableZoom",
  "EnableZoomPropertyDescriptions": "<p>Set whether the user can zoom the map using touch gestures. This value does not affect whether the user can zoom using the zoom controls from",
  "EnabledProperties": "Enabled",
  "EnabledPropertyDescriptions": "If set, user can tap TimePicker to cause action.",
  "ErrorOccurredEventDescriptions": "Event raised when an error occurs. Only some errors will raise this condition. For those errors, the system will show a notification by default. You can use this event handler to prescribe an error behavior different than the default.",
  "ErrorOccurredEvents": "ErrorOccurred",
  "Ev3ColorSensorHelpStringComponentPallette": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS EV3 robot.",
  "Ev3CommandsHelpStringComponentPallette": "A component that provides a low-level interface to a LEGO MINDSTORMS EV3 robot, with functions to send system or direct commands to EV3 robots.",
  "Ev3GyroSensorHelpStringComponentPallette": "A component that provides a high-level interface to a gyro sensor on a LEGO MINDSTORMS EV3 robot.",
  "Ev3MotorsHelpStringComponentPallette": "A component that provides both high- and low-level interfaces to a LEGO MINDSTORMS EV3 robot, with functions that can control the motors.",
  "Ev3SoundHelpStringComponentPallette": "A component that provides a high-level interface to sound functionalities on LEGO MINDSTORMS EV3 robot.",
  "Ev3TouchSensorHelpStringComponentPallette": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS EV3 robot.",
  "Ev3UIHelpStringComponentPallette": "A component that provides a high-level interface to a LEGO MINDSTORMS EV3 robot, with functions to draw graphs on EV3 screen.",
  "Ev3UltrasonicSensorHelpStringComponentPallette": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS EV3 robot.",
  "ExtraKeyProperties": "ExtraKey",
  "ExtraKeyPropertyDescriptions": "Returns the extra key that will be passed to the activity.DEPRECATED: New code should use Extras property instead.",
  "ExtraValueProperties": "ExtraValue",
  "ExtraValuePropertyDescriptions": "Returns the extra value that will be passed to the activity.DEPRECATED: New code should use Extras property instead.",
  "ExtrasProperties": "Extras",
  "ExtrasPropertyDescriptions": "Specifies the list of key-value pairs that will be passed as extra data to the activity.",
  "FeatureClickEventDescriptions": "The user clicked on a map feature.",
  "FeatureClickEvents": "FeatureClick",
  "FeatureCollectionHelpStringComponentPallette": "A FeatureColletion contains one or more map features as a group. Any events fired on a feature in the collection will also trigger the corresponding event on the collection object. FeatureCollections can be loaded from external resources as a means of populating a Map with content.",
  "FeatureDragEventDescriptions": "The user dragged a map feature.",
  "FeatureDragEvents": "FeatureDrag",
  "FeatureFromDescriptionMethodDescriptions": "Convert a feature description into an App Inventor map feature. Currently the only supported conversion is from a GeoJSON point to Marker component. If the feature has properties, they will be mapped into App Inventor properties using the following mapping: description becomes Description; draggable becomes Draggable; infobox becomes EnableInfobox; fill becomes FillColor; image becomes ImageAsset; stroke becomes StrokeColor; stroke-width becomes StrokeWidth; title becomes Title; visible becomes Visible",
  "FeatureFromDescriptionMethods": "FeatureFromDescription",
  "FeatureLongClickEventDescriptions": "The user long-pressed on a map feature.",
  "FeatureLongClickEvents": "FeatureLongClick",
  "FeatureStartDragEventDescriptions": "The user started dragging a map feature.",
  "FeatureStartDragEvents": "FeatureStartDrag",
  "FeatureStopDragEventDescriptions": "The user stopped dragging a map feature.",
  "FeatureStopDragEvents": "FeatureStopDrag",
  "FeaturesFromGeoJSONProperties": "FeaturesFromGeoJSON",
  "FeaturesFromGeoJSONPropertyDescriptions": "Loads a collection of features from the given string. If the string is not valid GeoJSON, the ErrorLoadingFeatureCollection error will be run with url = <string>.",
  "FeaturesProperties": "Features",
  "FeaturesPropertyDescriptions": "The list of features placed on this Map. This list also includes any features created by calls to FeatureFromDescription",
  "FileHelpStringComponentPallette": "Non-visible component for storing and retrieving files. Use this component to write or read files on your device. The default behaviour is to write files to the private data directory associated with your App. The Companion is special cased to write files to /sdcard/AppInventor/data to facilitate debugging. If the file path starts with a slash (/), then the file is created relative to /sdcard. For example writing a file to /myFile.txt will write the file in /sdcard/myFile.txt.",
  "FillColorProperties": "FillColor",
  "FillColorPropertyDescriptions": "The paint color used to fill in the Rectangle.",
  "FillScreenMethodDescriptions": "Fill the screen with a color.",
  "FillScreenMethods": "FillScreen",
  "FirebaseDBHelpStringComponentPallette": "Non-visible component that communicates with Firebase to store and retrieve information.",
  "FirebaseErrorEventDescriptions": "Indicates that the communication with the Firebase signaled an error.",
  "FirebaseErrorEvents": "FirebaseError",
  "FirebaseTokenProperties": "FirebaseToken",
  "FirebaseTokenPropertyDescriptions": "Getter for the FirebaseToken.",
  "FirebaseURLProperties": "FirebaseURL",
  "FirebaseURLPropertyDescriptions": "Gets the URL for this FirebaseDB.",
  "FirstRemovedEventDescriptions": "Event triggered by the \"RemoveFirst\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.",
  "FirstRemovedEvents": "FirstRemoved",
  "FlungEventDescriptions": "When a fling gesture (quick swipe) is made on the sprite: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling's vector.",
  "FlungEvents": "Flung",
  "FollowLinksProperties": "FollowLinks",
  "FollowLinksPropertyDescriptions": "Determines whether to follow links when they are tapped in the WebViewer. If you follow links, you can use GoBack and GoForward to navigate the browser history.",
  "FollowMethodDescriptions": "Starts following a user.",
  "FollowMethods": "Follow",
  "FollowersProperties": "Followers",
  "FollowersPropertyDescriptions": "This property contains a list of the followers of the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Call the <code>RequestFollowers</code> method.</li> <li> Wait for the <code>FollowersReceived</code> event.</li></ol>The value of this property will then be set to the list of followers (and maintain its value until any subsequent call to <code>RequestFollowers</code>).",
  "FollowersReceivedEventDescriptions": "This event is raised when all of the followers of the logged-in user requested through <code>RequestFollowers</code> have been retrieved. A list of the followers can then be found in the <code>followers</code> parameter or the <code>Followers</code> property.",
  "FollowersReceivedEvents": "FollowersReceived",
  "FontBoldProperties": "FontBold",
  "FontBoldPropertyDescriptions": "If set, TimePicker text is displayed in bold.",
  "FontItalicProperties": "FontItalic",
  "FontItalicPropertyDescriptions": "If set, TimePicker text is displayed in italics.",
  "FontSizeProperties": "FontSize",
  "FontSizePropertyDescriptions": "Point size for TimePicker text.",
  "FontTypefaceProperties": "FontTypeface",
  "FontTypefacePropertyDescriptions": "Font family for TimePicker text.",
  "ForgetLoginMethodDescriptions": "Forget end-users login credentials. Has no effect on service authentication",
  "ForgetLoginMethods": "ForgetLogin",
  "FormHelpStringComponentPallette": "Top-level component containing all other components in the program",
  "FormatDateMethodDescriptions": "Text representing the date of an instant in the specified pattern",
  "FormatDateMethods": "FormatDate",
  "FormatDateTimeMethodDescriptions": "Text representing the date and time of an instant in the specified pattern",
  "FormatDateTimeMethods": "FormatDateTime",
  "FormatTimeMethodDescriptions": "Text representing the time of an instant",
  "FormatTimeMethods": "FormatTime",
  "FriendTimelineProperties": "FriendTimeline",
  "FriendTimelinePropertyDescriptions": "This property contains the 20 most recent messages of users being followed. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Specify users to follow with one or more calls to the <code>Follow</code> method.</li> <li> Call the <code>RequestFriendTimeline</code> method.</li> <li> Wait for the <code>FriendTimelineReceived</code> event.</li> </ol>The value of this property will then be set to the list of messages (and maintain its value until any subsequent call to <code>RequestFriendTimeline</code>.",
  "FriendTimelineReceivedEventDescriptions": "This event is raised when the messages requested through <code>RequestFriendTimeline</code> have been retrieved. The <code>timeline</code> parameter and the <code>Timeline</code> property will contain a list of lists, where each sub-list contains a status update of the form (username message)",
  "FriendTimelineReceivedEvents": "FriendTimelineReceived",
  "FullScreenProperties": "FullScreen",
  "FullScreenPropertyDescriptions": "Returns whether the VideoPlayer's video is currently being shown in fullscreen mode or not.",
  "FunctionCompletedEventDescriptions": "Indicates that a function call completed.",
  "FunctionCompletedEvents": "FunctionCompleted",
  "FusionTablesDeprecated": "WARNING: Google has Deprecated the Fusion Tables Service. It will stop working on December 3, 2019 <a href=\"https://support.google.com/fusiontables/answer/9185417\" target=\"_blank\"> Learn More</a>",
  "FusionTablesStandardErrorMessage": "Error on Fusion Tables query",
  "FusiontablesControlHelpStringComponentPallette": "<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.</p> <p>This component uses the <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">Fusion Tables API V2.0</a>. <p>Applications using Fusion Tables must authentication to Google's servers. There are two ways this can be done. The first way uses an API Key which you the developer obtain (see below). With this approach end-users must also login to access a Fusion Table. The second approach is to use a Service Account. With this approach you create credentials and a special \"Service Account Email Address\" which you obtain from the <a href=\"https://code.google.com/apis/console/\" target=\"_blank\">Google APIs Console</a>. You then tell the Fusion Table Control the name of the Service Account Email address and upload the secret key as an asset to your application and set the KeyFile property to point at this file. Finally you check the \"UseServiceAuthentication\" checkbox in the designer. When using a Service Account, end-users do not need to login to use Fusion Tables, your service account authenticates all access.</p> <p>To get an API key, follow these instructions.</p> <ol><li>Go to your <a href=\"https://code.google.com/apis/console/\" target=\"_blank\">Google APIs Console</a> and login if necessary.</li><li>Select the <i>Services</i> item from the menu on the left.</li><li>Choose the <i>Fusiontables</i> service from the list provided and turn it on.</li><li>Go back to the main menu and select the <i>API Access</i> item. </li></ol><p>Your API Key will be near the bottom of that pane in the section called \"Simple API Access\".You will have to provide that key as the value for the <i>ApiKey</i> property in your Fusiontables app.</p><p>Once you have an API key, set the value of the <i>Query</i> property to a valid Fusiontables SQL query and call <i>SendQuery</i> to execute the query. App Inventor will send the query to the Fusion Tables server and the <i>GotResult</i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.</p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">the reference manual</a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.</p>",
  "GPSAvailableEventDescriptions": "Event for GPSAvailable",
  "GPSAvailableEvents": "GPSAvailable",
  "GPSLostEventDescriptions": "Event for GPSLost",
  "GPSLostEvents": "GPSLost",
  "GameClientHelpStringComponentPallette": "Provides a way for applications to communicate with online game servers",
  "GameIdProperties": "GameId",
  "GameIdPropertyDescriptions": "The game name for this application. The same game ID can have one or more game instances.",
  "GenerateColorProperties": "GenerateColor",
  "GenerateColorPropertyDescriptions": "The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True.",
  "GenerateLightProperties": "GenerateLight",
  "GenerateLightPropertyDescriptions": "Whether the light sensor should generate light.",
  "GetBackgroundPixelColorMethodDescriptions": "Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.",
  "GetBackgroundPixelColorMethods": "GetBackgroundPixelColor",
  "GetBatteryCurrentMethodDescriptions": "Get the battery current.",
  "GetBatteryCurrentMethods": "GetBatteryCurrent",
  "GetBatteryLevelMethodDescriptions": "Get the battery level for the robot. Returns the voltage in millivolts.",
  "GetBatteryLevelMethods": "GetBatteryLevel",
  "GetBatteryVoltageMethodDescriptions": "Get the battery voltage.",
  "GetBatteryVoltageMethods": "GetBatteryVoltage",
  "GetBrickNameMethodDescriptions": "Get the brick name of the robot.",
  "GetBrickNameMethods": "GetBrickName",
  "GetColorCodeMethodDescriptions": "It returns the color code from 0 to 7 corresponding to no color, black, blue, green, yellow, red, white and brown.",
  "GetColorCodeMethods": "GetColorCode",
  "GetColorMethodDescriptions": "Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.",
  "GetColorMethods": "GetColor",
  "GetColorNameMethodDescriptions": "Return the color name in one of \"No Color\", \"Black\", \"Blue\", \"Green\", \"Yellow\", \"Red\", \"White\", \"Brown\".",
  "GetColorNameMethods": "GetColorName",
  "GetCurrentProgramNameMethodDescriptions": "Get the name of currently running program on the robot.",
  "GetCurrentProgramNameMethods": "GetCurrentProgramName",
  "GetDistanceMethodDescriptions": "Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.",
  "GetDistanceMethods": "GetDistance",
  "GetDurationMethodDescriptions": "Returns duration of the video in milliseconds.",
  "GetDurationMethods": "GetDuration",
  "GetFirmwareBuildMethodDescriptions": "Get the firmware build on EV3.",
  "GetFirmwareBuildMethods": "GetFirmwareBuild",
  "GetFirmwareVersionMethodDescriptions": "Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.",
  "GetFirmwareVersionMethods": "GetFirmwareVersion",
  "GetHardwareVersionMethodDescriptions": "Get the hardware version of EV3.",
  "GetHardwareVersionMethods": "GetHardwareVersion",
  "GetInputValuesMethodDescriptions": "Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.",
  "GetInputValuesMethods": "GetInputValues",
  "GetInstallerMethodDescriptions": "Return the app that installed us",
  "GetInstallerMethods": "GetInstaller",
  "GetInstanceListsMethodDescriptions": "Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.",
  "GetInstanceListsMethods": "GetInstanceLists",
  "GetLightLevelMethodDescriptions": "Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.",
  "GetLightLevelMethods": "GetLightLevel",
  "GetMessagesMethodDescriptions": "Retrieves messages of the specified type.",
  "GetMessagesMethods": "GetMessages",
  "GetMethodDescriptions": "Performs an HTTP GET request using the Url property and retrieves the response.<br> If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br> If the SaveResponse property is false, the GotText event will be triggered.",
  "GetMethods": "Get",
  "GetMillisMethodDescriptions": "The instant in time measured as milliseconds since 1970.",
  "GetMillisMethods": "GetMillis",
  "GetOSBuildMethodDescriptions": "Get the OS build on EV3.",
  "GetOSBuildMethods": "GetOSBuild",
  "GetOSVersionMethodDescriptions": "Get the OS version on EV3.",
  "GetOSVersionMethods": "GetOSVersion",
  "GetOutputStateMethodDescriptions": "Reads the output state of a motor on the robot.",
  "GetOutputStateMethods": "GetOutputState",
  "GetPixelColorMethodDescriptions": "Gets the color of the specified point.",
  "GetPixelColorMethods": "GetPixelColor",
  "GetRowsMethodDescriptions": "Gets all the rows from a specified fusion table. The tableId field is the id of therequired fusion table. The columns field is a comma-separeted list of the columns to retrieve.",
  "GetRowsMethods": "GetRows",
  "GetRowsWithConditionsMethodDescriptions": "Gets all the rows from a fusion table that meet certain conditions. The tableId field isthe id of the required fusion table. The columns field is a comma-separeted list of the columns toretrieve. The conditions field specifies what rows to retrieve from the table, for example the rows in whicha particular column value is not null.",
  "GetRowsWithConditionsMethods": "GetRowsWithConditions",
  "GetSensorValueMethodDescriptions": "Returns the current angle or rotation speed based on current mode, or -1 if the value cannot be read from sensor.",
  "GetSensorValueMethods": "GetSensorValue",
  "GetSoundLevelMethodDescriptions": "Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.",
  "GetSoundLevelMethods": "GetSoundLevel",
  "GetTachoCountMethodDescriptions": "Get the current tacho count.",
  "GetTachoCountMethods": "GetTachoCount",
  "GetTagListMethodDescriptions": "Get the list of tags for this application. When complete a \"TagList\" event will be triggered with the list of known tags.",
  "GetTagListMethods": "GetTagList",
  "GetTagsMethodDescriptions": "Return a list of all the tags in the data store",
  "GetTagsMethods": "GetTags",
  "GetTextMethodDescriptions": "Solicits speech input from the user. After the speech is converted to text, the AfterGettingText event will be raised.",
  "GetTextMethods": "GetText",
  "GetValueMethodDescriptions": "GetValue asks the Web service to get the value stored under the given tag. It is up to the Web service what to return if there is no value stored under the tag. This component just accepts whatever is returned.",
  "GetValueMethods": "GetValue",
  "GetVersionNameMethodDescriptions": "Return the our VersionName property",
  "GetVersionNameMethods": "GetVersionName",
  "GetWifiIpAddressMethodDescriptions": "Returns the IP address of the phone in the form of a String",
  "GetWifiIpAddressMethods": "GetWifiIpAddress",
  "GoBackMethodDescriptions": "Go back to the previous page in the history list. Does nothing if there is no previous page.",
  "GoBackMethods": "GoBack",
  "GoForwardMethodDescriptions": "Go forward to the next page in the history list. Does nothing if there is no next page.",
  "GoForwardMethods": "GoForward",
  "GoHomeMethodDescriptions": "Loads the home URL page. This happens automatically when the home URL is changed.",
  "GoHomeMethods": "GoHome",
  "GoToUrlMethodDescriptions": "Load the page at the given URL.",
  "GoToUrlMethods": "GoToUrl",
  "GoogleVoiceEnabledProperties": "GoogleVoiceEnabled",
  "GoogleVoiceEnabledPropertyDescriptions": "If true, then SendMessage will attempt to send messages over Wifi using Google Voice. This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account. If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component.",
  "GotBallotConfirmationEventDescriptions": "Event confirming that the Voting service received the ballot.",
  "GotBallotConfirmationEvents": "GotBallotConfirmation",
  "GotBallotEventDescriptions": "Event indicating that a ballot was retrieved from the Web service and that the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set. This is always preceded by a call to the method <code>RequestBallot</code>.",
  "GotBallotEvents": "GotBallot",
  "GotFeaturesEventDescriptions": "A GeoJSON document was successfully read from url. The features specified in the document are provided as a list in features.",
  "GotFeaturesEvents": "GotFeatures",
  "GotFileEventDescriptions": "Event indicating that a request has finished.",
  "GotFileEvents": "GotFile",
  "GotFocusEventDescriptions": "Indicates the cursor moved over the TimePicker so it is now possible to click it.",
  "GotFocusEvents": "GotFocus",
  "GotMessageEventDescriptions": "Indicates that a new message has been received.",
  "GotMessageEvents": "GotMessage",
  "GotResultEventDescriptions": "Indicates that the Fusion Tables query has finished processing, with a result. The result of the query will generally be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.",
  "GotResultEvents": "GotResult",
  "GotTextEventDescriptions": "Event indicating that a request has finished.",
  "GotTextEvents": "GotText",
  "GotTranslationEventDescriptions": "Event triggered when the Yandex.Translate service returns the translated text. This event also provides a response code for error handling. If the responseCode is not 200, then something went wrong with the call, and the translation will not be available.",
  "GotTranslationEvents": "GotTranslation",
  "GotValueEventDescriptions": "Indicates that a GetValue server request has succeeded.",
  "GotValueEvents": "GotValue",
  "GyroscopeChangedEventDescriptions": "Indicates that the gyroscope sensor data has changed. The timestamp parameter is the time in nanoseconds at which the event occurred.",
  "GyroscopeChangedEvents": "GyroscopeChanged",
  "GyroscopeSensorHelpStringComponentPallette": "<p>Non-visible component that can measure angular velocity in three dimensions in units of degrees per second.</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have a gyroscope sensor.</p>",
  "HTMLFormatProperties": "HTMLFormat",
  "HTMLFormatPropertyDescriptions": "If true, then this label will show html text else it will show plain text. Note: Not all HTML is supported.",
  "HasAccuracyProperties": "HasAccuracy",
  "HasAccuracyPropertyDescriptions": "Indicates whether information about location accuracy is available.",
  "HasAltitudeProperties": "HasAltitude",
  "HasAltitudePropertyDescriptions": "Indicates whether altitude information is available.",
  "HasLongitudeLatitudeProperties": "HasLongitudeLatitude",
  "HasLongitudeLatitudePropertyDescriptions": "Indicates whether longitude and latitude information is available. (It is always the case that either both or neither are.)",
  "HasMarginsProperties": "HasMargins",
  "HasMarginsPropertyDescriptions": "Reports whether or not the label appears with margins. All four margins (left, right, top, bottom) are the same. This property has no effect in the designer, where labels are always shown with margins.",
  "HeadingProperties": "Heading",
  "HeadingPropertyDescriptions": "Sets heading in which sprite should move. In addition to changing the local variables",
  "HeightPercentProperties": "HeightPercent",
  "HeightPercentPropertyDescriptions": "Specifies the vertical height of the WebViewer as a percentage of the height of the Screen.",
  "HeightProperties": "Height",
  "HeightPropertyDescriptions": "Specifies the vertical height of the WebViewer, measured in pixels.",
  "HideInfoboxMethodDescriptions": "Hide the infobox if it is shown. If the infobox is not visible this function has no effect.",
  "HideInfoboxMethods": "HideInfobox",
  "HideKeyboardMethodDescriptions": "Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.",
  "HideKeyboardMethods": "HideKeyboard",
  "HighByteFirstProperties": "HighByteFirst",
  "HighByteFirstPropertyDescriptions": "Returns true if numbers are sent and received with the most significant byte first.",
  "HintProperties": "Hint",
  "HintPropertyDescriptions": "Text that should appear faintly in the TextBox to provide a hint as to what the user should enter. This can only be seen if the <code>Text</code> property is empty.",
  "HolePointsFromStringProperties": "HolePointsFromString",
  "HolePointsFromStringPropertyDescriptions": "Constructs holes in a polygon from a given list of coordinates per hole.",
  "HolePointsProperties": "HolePoints",
  "HolePointsPropertyDescriptions": "",
  "HomeUrlProperties": "HomeUrl",
  "HomeUrlPropertyDescriptions": "URL of the page the WebViewer should initially open to. Setting this will load the page.",
  "HorizontalArrangementHelpStringComponentPallette": "<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p>",
  "HorizontalScrollArrangementHelpStringComponentPallette": "<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p><p>This version is scrollable.",
  "HourMethodDescriptions": "The hour of the day",
  "HourMethods": "Hour",
  "HourProperties": "Hour",
  "HourPropertyDescriptions": "The hour of the last time set using the time picker. The hour is in a 24 hour format. If the last time set was 11:53 pm, this property will return 23.",
  "HtmlTextDecodeMethodDescriptions": "Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &#39;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.",
  "HtmlTextDecodeMethods": "HtmlTextDecode",
  "IconProperties": "Icon",
  "IconPropertyDescriptions": "Specifies the name of the application icon.",
  "IgnoreSslErrorsProperties": "IgnoreSslErrors",
  "IgnoreSslErrorsPropertyDescriptions": "Determine whether or not to ignore SSL errors. Set to true to ignore errors. Use this to accept self signed certificates from websites.",
  "ImageAssetProperties": "ImageAsset",
  "ImageAssetPropertyDescriptions": "The ImageAsset property is used to provide an alternative image for the Marker.",
  "ImageHelpStringComponentPallette": "Component for displaying images. The picture to display, and other aspects of the Image's appearance, can be specified in the Designer or in the Blocks Editor.",
  "ImagePickerHelpStringComponentPallette": "A special-purpose button. When the user taps an image picker, the device's image gallery appears, and the user can choose an image. After an image is picked, it is saved, and the <code>Selected</code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored. Picking more images will delete previous images, in order from oldest to newest.",
  "ImageProperties": "Image",
  "ImagePropertyDescriptions": "Returns the path of the background image of the VerticalScrollArrangement.",
  "ImageSpriteHelpStringComponentPallette": "<p>A 'sprite' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>Ball</code>s and other <code>ImageSprite</code>s) and the edge of the Canvas, and move according to its property values. Its appearance is that of the image specified in its <code>Picture</code> property (unless its <code>Visible</code> property is <code>False</code>.</p> <p>To have an <code>ImageSprite</code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed</code> property to 10 [pixels], the <code>Interval</code> property to 1000 [milliseconds], the <code>Heading</code> property to 180 [degrees], and the <code>Enabled</code> property to <code>True</code>. A sprite whose <code>Rotates</code> property is <code>True</code> will rotate its image as the sprite's <code>Heading</code> changes. Checking for collisions with a rotated sprite currently checks the sprite's unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated. Any of the sprite properties can be changed at any time under program control.</p>",
  "IncomingCallAnsweredEventDescriptions": "Event indicating that an incoming phone call is answered. phoneNumber is the incoming call phone number.",
  "IncomingCallAnsweredEvents": "IncomingCallAnswered",
  "InfoEventDescriptions": "Indicates that something has occurred which the player should know about.",
  "InfoEvents": "Info",
  "InitializeEventDescriptions": "Screen starting",
  "InitializeEvents": "Initialize",
  "InsertRowMethodDescriptions": "Inserts a row into the specified fusion table. The tableId field is the id of thefusion table. The columns is a comma-separated list of the columns to insert values into. The values field specifies what values to insert into each column.",
  "InsertRowMethods": "InsertRow",
  "InstallationIdMethodDescriptions": "Return the ACRA Installation ID",
  "InstallationIdMethods": "InstallationId",
  "InstanceIdChangedEventDescriptions": "Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance.",
  "InstanceIdChangedEvents": "InstanceIdChanged",
  "InstanceIdProperties": "InstanceId",
  "InstanceIdPropertyDescriptions": "The game instance id. Taken together,the game ID and the instance ID uniquely identify the game.",
  "InstantInTimeParams": "InstantInTime",
  "InstantMethods": "Instant",
  "InstantProperties": "Instant",
  "InstantPropertyDescriptions": "The instant of the last time set using the time picker",
  "IntervalProperties": "Interval",
  "IntervalPropertyDescriptions": "The interval in milliseconds at which the sprite's position is updated. For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds.",
  "InvalidPointEventDescriptions": "An invalid coordinate was supplied during a maps operation. The message parameter will have more details about the issue.",
  "InvalidPointEvents": "InvalidPoint",
  "InviteMethodDescriptions": "Invites a player to this game instance.",
  "InviteMethods": "Invite",
  "InvitedEventDescriptions": "Indicates that a user has been invited to this game instance.",
  "InvitedEvents": "Invited",
  "InvitedInstancesProperties": "InvitedInstances",
  "InvitedInstancesPropertyDescriptions": "The set of game instances to which this player has been invited but has not yet joined. To ensure current values are returned, first invoke GetInstanceLists.",
  "IsAcceptingProperties": "IsAccepting",
  "IsAcceptingPropertyDescriptions": "Returns true if this BluetoothServer component is accepting an incoming connection.",
  "IsAuthorizedEventDescriptions": "This event is raised after the program calls <code>Authorize</code> if the authorization was successful. It is also called after a call to <code>CheckAuthorized</code> if we already have a valid access token. After this event has been raised, any other method for this component can be called.",
  "IsAuthorizedEvents": "IsAuthorized",
  "IsConnectedProperties": "IsConnected",
  "IsConnectedPropertyDescriptions": "Returns true if a connection to a Bluetooth device has been made.",
  "IsDevicePairedMethodDescriptions": "Checks whether the Bluetooth device with the specified address is paired.",
  "IsDevicePairedMethods": "IsDevicePaired",
  "IsPlayingProperties": "IsPlaying",
  "IsPlayingPropertyDescriptions": "Reports whether the media is playing",
  "IsPressedMethodDescriptions": "Returns true if the touch sensor is pressed.",
  "IsPressedMethods": "IsPressed",
  "ItemBackgroundColorProperties": "ItemBackgroundColor",
  "ItemBackgroundColorPropertyDescriptions": "The background color of the ListPicker items.",
  "ItemTextColorProperties": "ItemTextColor",
  "ItemTextColorPropertyDescriptions": "The text color of the ListPicker items.",
  "JoinedInstancesProperties": "JoinedInstances",
  "JoinedInstancesPropertyDescriptions": "The set of game instances in which this player is participating. To ensure current values are returned, first invoke GetInstanceLists.",
  "JsonTextDecodeMethodDescriptions": "Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list [x, y, z] decodes to a list (x y z), A JSON object with name A and value B, (denoted as A:B enclosed in curly braces) decodes to a list ((A B)), that is, a list containing the two-element list (A B).",
  "JsonTextDecodeMethods": "JsonTextDecode",
  "KeepAliveMethodDescriptions": "Keep Alive. Returns the current sleep time limit in milliseconds.",
  "KeepAliveMethods": "KeepAlive",
  "KeepRunningWhenOnPauseProperties": "KeepRunningWhenOnPause",
  "KeepRunningWhenOnPausePropertyDescriptions": "Returns value of keepRunningWhenOnPause",
  "KeyFileProperties": "KeyFile",
  "KeyFilePropertyDescriptions": "Specifies the path of the private key file. This key file is used to get access to the FusionTables API.",
  "LabelHelpStringComponentPallette": "A Label displays a piece of text, which is specified through the <code>Text</code> property. Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.",
  "LanguageProperties": "Language",
  "LanguagePropertyDescriptions": "Sets the language for TextToSpeech. This changes the way that words are pronounced, not the actual language that is spoken. For example setting the language to and speaking English text with sound like someone speaking English with a Frernch accent.",
  "LastMessageProperties": "LastMessage",
  "LastMessagePropertyDescriptions": "Returns the content of the most recently received tag.",
  "LatitudeFromAddressMethodDescriptions": "Derives latitude of given address",
  "LatitudeFromAddressMethods": "LatitudeFromAddress",
  "LatitudeProperties": "Latitude",
  "LatitudePropertyDescriptions": "",
  "LaunchPickerMethodDescriptions": "Launches the TimePicker popup.",
  "LaunchPickerMethods": "LaunchPicker",
  "LeaderProperties": "Leader",
  "LeaderPropertyDescriptions": "The game's leader. At any time, each game instance has only one leader, but the leader may change with time. Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server.",
  "LeaveInstanceMethodDescriptions": "Leaves the current instance.",
  "LeaveInstanceMethods": "LeaveInstance",
  "LegacyModeProperties": "LegacyMode",
  "LegacyModePropertyDescriptions": "Prior to the release that added this property the AccelerometerSensor component passed through sensor values directly as received from the Android system. However these values do not compensate for tablets that default to Landscape mode, requiring the MIT App Inventor programmer to compensate. However compensating would result in incorrect results in Portrait mode devices such as phones. We now detect Landscape mode tablets and perform the compensation. However if your project is already compensating for the change, you will now get incorrect results. Although our preferred solution is for you to update your project, you can also just set this property to “true” and our compensation code will be deactivated. Note: We recommend that you update your project as we may remove this property in a future release.",
  "LineStringHelpStringComponentPallette": "LineString",
  "LineWidthProperties": "LineWidth",
  "LineWidthPropertyDescriptions": "The width of lines drawn on the canvas.",
  "ListFilesMethodDescriptions": "Returns a list containing the names of matching files found on the robot.",
  "ListFilesMethods": "ListFiles",
  "ListPickerHelpStringComponentPallette": "<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString</code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor.</p><p>Setting property ShowFilterBar to true, will make the list searchable. Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p>",
  "ListViewHelpStringComponentPallette": "<p>This is a visible component that displays a list of text elements. <br> The list can be set using the ElementsFromString property or using the Elements block in the blocks editor. </p>",
  "LoadErrorEventDescriptions": "An error was encountered while processing a GeoJSON document at the given url. The responseCode parameter will contain an HTTP status code and the errorMessage parameter will contain a detailed error message.",
  "LoadErrorEvents": "LoadError",
  "LoadFromURLMethodDescriptions": "<p>Load a feature collection in <a href=\"https://en.wikipedia.org/wiki/GeoJSON\">GeoJSON</a> format from the given url. On success, the event GotFeatures will be raised with the given url and a list of the features parsed from the GeoJSON as a list of (key, value) pairs. On failure, the LoadError event will be raised with any applicable HTTP response code and error message.</p>",
  "LoadFromURLMethods": "LoadFromURL",
  "LoadingDialogMessageProperties": "LoadingDialogMessage",
  "LoadingDialogMessagePropertyDescriptions": "Setter for the loading dialog's message.",
  "LocationChangedEventDescriptions": "Indicates that a new location has been detected.",
  "LocationChangedEvents": "LocationChanged",
  "LocationSensorHelpStringComponentPallette": "Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), speed (if supported by the device), and address. This can also perform \"geocoding\", converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress</code> method) and a longitude (with the <code>LongitudeFromAddress</code> method).</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have location sensing enabled through wireless networks or GPS satellites (if outdoors).</p>Location information might not be immediately available when an app starts. You'll have to wait a short time for a location provider to be found and used, or wait for the OnLocationChanged event",
  "LocationSensorProperties": "LocationSensor",
  "LocationSensorPropertyDescriptions": "Uses the provided LocationSensor for user location data rather than the built-in location provider.",
  "LogErrorMethodDescriptions": "Writes an error message to the Android system log. See the Google Android documentation for how to access the log.",
  "LogErrorMethods": "LogError",
  "LogInfoMethodDescriptions": "Writes an information message to the Android log.",
  "LogInfoMethods": "LogInfo",
  "LogWarningMethodDescriptions": "Writes a warning message to the Android log. See the Google Android documentation for how to access the log.",
  "LogWarningMethods": "LogWarning",
  "LongClickEventDescriptions": "The user long-pressed on the Rectangle. This event will only trigger if Draggable is false.",
  "LongClickEvents": "LongClick",
  "LongPressAtPointEventDescriptions": "The user long-pressed at a point on the map.",
  "LongPressAtPointEvents": "LongPressAtPoint",
  "LongitudeFromAddressMethodDescriptions": "Derives longitude of given address",
  "LongitudeFromAddressMethods": "LongitudeFromAddress",
  "LongitudeProperties": "Longitude",
  "LongitudePropertyDescriptions": "",
  "LoopProperties": "Loop",
  "LoopPropertyDescriptions": "If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing.",
  "LostFocusEventDescriptions": "Indicates the cursor moved away from the TimePicker so it is now no longer possible to click it.",
  "LostFocusEvents": "LostFocus",
  "LsGetStatusMethodDescriptions": "Returns the count of available bytes to read.",
  "LsGetStatusMethods": "LsGetStatus",
  "LsReadMethodDescriptions": "Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.",
  "LsReadMethods": "LsRead",
  "LsWriteMethodDescriptions": "Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.",
  "LsWriteMethods": "LsWrite",
  "MagnitudeProperties": "Magnitude",
  "MagnitudePropertyDescriptions": "Magnitude property getter method (read-only property). Specifically, this returns a number between 0 and 1, indicating how much the device is tilted. For the angle of tilt, use",
  "MakeDateMethodDescriptions": "Allows the user to set the clock to be a date value.Valid values for the month field are 1-12 and 1-31 for the day field.",
  "MakeDateMethods": "MakeDate",
  "MakeInstantFromMillisMethodDescriptions": "An instant in time specified by the milliseconds since 1970.",
  "MakeInstantFromMillisMethods": "MakeInstantFromMillis",
  "MakeInstantFromPartsMethodDescriptions": "Allows the user to set the date and time to be displayed when the clock opens.Valid values for the month field are 1-12 and 1-31 for the day field.",
  "MakeInstantFromPartsMethods": "MakeInstantFromParts",
  "MakeInstantMethodDescriptions": "An instant in time specified by MM/dd/YYYY hh:mm:ss or MM/dd/YYYY or hh:mm",
  "MakeInstantMethods": "MakeInstant",
  "MakeNewInstanceMethodDescriptions": "Asks the server to create a new instance of this game.",
  "MakeNewInstanceMethods": "MakeNewInstance",
  "MakePhoneCallDirectMethodDescriptions": "Makes a phone call using the number in the PhoneNumber property.",
  "MakePhoneCallDirectMethods": "MakePhoneCallDirect",
  "MakePhoneCallMethodDescriptions": "Makes a phone call using the number in the PhoneNumber property.",
  "MakePhoneCallMethods": "MakePhoneCall",
  "MakeTimeMethodDescriptions": "Allows the user to set the time of the clock - Valid format is hh:mm:ss",
  "MakeTimeMethods": "MakeTime",
  "MapHelpStringComponentPallette": "<p>A two-dimensional container that renders map tiles in the background and allows for multiple Marker elements to identify points on the map. Map tiles are supplied by OpenStreetMap contributors and the United States Geological Survey.</p><p>The Map component provides three utilities for manipulating its boundaries within App Inventor. First, a locking mechanism is provided to allow the map to be moved relative to other components on the Screen. Second, when unlocked, the user can pan the Map to any location. At this new location, the &quot;Set Initial Boundary&quot; button can be pressed to save the current Map coordinates to its properties. Lastly, if the Map is moved to a different location, for example to add Markers off-screen, then the &quot;Reset Map to Initial Bounds&quot; button can be used to re-center the Map at the starting location.</p>",
  "MapTypeProperties": "MapType",
  "MapTypePropertyDescriptions": "<p>Set the type of map tile used for the base tile layer. Valid values are:</p> <ol> <li>Roads</li> <li>Aerial</li> <li>Terrain</li> </ol>",
  "MarkerHelpStringComponentPallette": "<p>An icon positioned at a point to indicate information on a map. Markers can be used to provide an info window, custom fill and stroke colors, and custom images to convey information to the user.</p>",
  "MaxValueProperties": "MaxValue",
  "MaxValuePropertyDescriptions": "Sets the maximum value of slider. Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value. Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.",
  "MaximumRangeMethods": "MaximumRangeMethods",
  "MaximumRangeProperties": "MaximumRange",
  "MaximumRangePropertyDescriptions": "Reports the Maximum Range of the device's ProximitySensor",
  "MediaStoreHelpStringComponentPallette": "Non-visible component that communicates with a Web service and stores media files.",
  "MediaStoredEventDescriptions": "Indicates that a MediaStored server request has succeeded.",
  "MediaStoredEvents": "MediaStored",
  "MentionsProperties": "Mentions",
  "MentionsPropertyDescriptions": "This property contains a list of mentions of the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Call the <code>RequestMentions</code> method.</li> <li> Wait for the <code>MentionsReceived</code> event.</li></ol>The value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to <code>RequestMentions</code>).",
  "MentionsReceivedEventDescriptions": "This event is raised when the mentions of the logged-in user requested through <code>RequestMentions</code> have been retrieved. A list of the mentions can then be found in the <code>mentions</code> parameter or the <code>Mentions</code> property.",
  "MentionsReceivedEvents": "MentionsReceived",
  "MessageProperties": "Message",
  "MessagePropertyDescriptions": "The message that will be sent when the SendMessage method is called.",
  "MessageReadMethodDescriptions": "Read a message from a mailbox (1-10) on the robot.",
  "MessageReadMethods": "MessageRead",
  "MessageReceivedEventDescriptions": "Event that's raised when a text message is received by the phone.",
  "MessageReceivedEvents": "MessageReceived",
  "MessageWriteMethodDescriptions": "Write a message to a mailbox (1-10) on the robot.",
  "MessageWriteMethods": "MessageWrite",
  "MinValueProperties": "MinValue",
  "MinValuePropertyDescriptions": "Sets the minimum value of slider. Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value. Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.",
  "MinimumIntervalProperties": "MinimumInterval",
  "MinimumIntervalPropertyDescriptions": "The minimum interval, in milliseconds, between sounds. If you play a sound, all further Play() calls will be ignored until the interval has elapsed.",
  "MinuteMethodDescriptions": "The minute of the hour",
  "MinuteMethods": "Minute",
  "MinuteProperties": "Minute",
  "MinutePropertyDescriptions": "The minute of the last time set using the time picker",
  "MockSpinnerAddItems": "add items...",
  "ModeProperties": "Mode",
  "ModePropertyDescriptions": "Specifies the mode of the sensor.",
  "MonthInTextProperties": "MonthInText",
  "MonthInTextPropertyDescriptions": "Returns the name of the Month that was last picked using the DatePicker, in textual format.",
  "MonthMethodDescriptions": "The month of the year represented as a number from 1 to 12)",
  "MonthMethods": "Month",
  "MonthNameMethodDescriptions": "The name of the month",
  "MonthNameMethods": "MonthName",
  "MonthProperties": "Month",
  "MonthPropertyDescriptions": "the number of the Month that was last picked using the DatePicker. Note that months start in 1 = January, 12 = December.",
  "MotorPortsProperties": "MotorPorts",
  "MotorPortsPropertyDescriptions": "The motor ports that the motors are connected to. The ports are specified by a sequence of port letters.",
  "MoveBackwardIndefinitelyMethodDescriptions": "Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.",
  "MoveBackwardIndefinitelyMethods": "MoveBackwardIndefinitely",
  "MoveBackwardMethodDescriptions": "Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.",
  "MoveBackwardMethods": "MoveBackward",
  "MoveForwardIndefinitelyMethodDescriptions": "Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.",
  "MoveForwardIndefinitelyMethods": "MoveForwardIndefinitely",
  "MoveForwardMethodDescriptions": "Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.",
  "MoveForwardMethods": "MoveForward",
  "MoveIntoBoundsMethodDescriptions": "Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas.",
  "MoveIntoBoundsMethods": "MoveIntoBounds",
  "MoveToMethodDescriptions": "Moves the sprite so that its left top corner is at the specfied x and y coordinates.",
  "MoveToMethods": "MoveTo",
  "MovingProperties": "Moving",
  "MovingPropertyDescriptions": "",
  "MultiLineProperties": "MultiLine",
  "MultiLinePropertyDescriptions": "If true, then this text box accepts multiple lines of input, which are entered using the return key. For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard. The app should call the HideKeyboard method to hide the keyboard for a mutiline text box.",
  "NamespaceProperties": "Namespace",
  "NamespacePropertyDescriptions": "Namespace for storing data.",
  "NearFieldHelpStringComponentPallette": "<p>Non-visible component to provide NFC capabilities. For now this component supports the reading and writing of text tags only (if supported by the device)</p><p>In order to read and write text tags, the component must have its <code>ReadMode</code> property set to True or False respectively.</p><p><strong>Note:</strong> This component will only work on Screen1 of any App Inventor app.</p>",
  "NewInstanceMadeEventDescriptions": "Indicates that a new instance was successfully created after calling MakeNewInstance.",
  "NewInstanceMadeEvents": "NewInstanceMade",
  "NewLeaderEventDescriptions": "Indicates that this game has a new leader as specified through SetLeader",
  "NewLeaderEvents": "NewLeader",
  "NoLongerCollidingWithEventDescriptions": "Event indicating that a pair of sprites are no longer colliding.",
  "NoLongerCollidingWithEvents": "NoLongerCollidingWith",
  "NoOpenPollEventDescriptions": "Event indicating that the service has no open poll.",
  "NoOpenPollEvents": "NoOpenPoll",
  "NorthLatitudeProperties": "NorthLatitude",
  "NorthLatitudePropertyDescriptions": "",
  "NoticeTitle": "Notice!",
  "NotifierHelpStringComponentPallette": "The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods: <ul><li> ShowMessageDialog: displays a message which the user must dismiss by pressing a button.</li><li> ShowChooseDialog: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised.</li><li> ShowTextDialog: lets the user enter text in response to the message, after which the AfterTextInput event is raised. <li> ShowPasswordDialog: lets the user enter password in response to the message, after which the AfterTextInput event is raised. <li> ShowAlert: displays a temporary alert that goes away by itself after a short time.</li><li> ShowProgressDialog: displays an alert with a loading spinner that cannot be dismissed by the user. It can only be dismissed by using the DismissProgressDialog block.</li><li> DismissProgressDialog: Dismisses the progress dialog displayed by ShowProgressDialog.</li><li> LogError: logs an error message to the Android log. </li><li> LogInfo: logs an info message to the Android log.</li><li> LogWarning: logs a warning message to the Android log.</li><li>The messages in the dialogs (but not the alert) can be formatted using the following HTML tags:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt;</li><li>You can also use the font tag to specify color, for example, &lt;font color=\"blue\"&gt;. Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow</li></ul>",
  "NotifierLengthProperties": "NotifierLength",
  "NotifierLengthPropertyDescriptions": "Specifies the length of time that the alert is shown -- either \"short\" or \"long\".",
  "NowMethodDescriptions": "The current instant in time read from phone's clock",
  "NowMethods": "Now",
  "NumbersOnlyProperties": "NumbersOnly",
  "NumbersOnlyPropertyDescriptions": "If true, then this text box accepts only numbers as keyboard input. Numbers can include a decimal point and an optional leading minus sign. This applies to keyboard input only. Even if NumbersOnly is true, you can use [set Text to] to enter any text at all.",
  "NxtColorSensorHelpStringComponentPallette": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.",
  "NxtDirectCommandsHelpStringComponentPallette": "A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.",
  "NxtDriveHelpStringComponentPallette": "A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.",
  "NxtLightSensorHelpStringComponentPallette": "A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.",
  "NxtSoundSensorHelpStringComponentPallette": "A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.",
  "NxtTouchSensorHelpStringComponentPallette": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.",
  "NxtUltrasonicSensorHelpStringComponentPallette": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.",
  "OnProperties": "On",
  "OnPropertyDescriptions": "Returns true if the checkbox is checked.",
  "OnSettingsEventDescriptions": "This event is fired when the \"settings\" menu item is selected (only available in the Companion App, defined in ReplForm.java).",
  "OnSettingsEvents": "OnSettings",
  "OpenMethodDescriptions": "Opens the picker, as though the user clicked on it.",
  "OpenMethods": "Open",
  "OpenScreenAnimationMethods": "OpenScreenAnimation",
  "OpenScreenAnimationProperties": "OpenScreenAnimation",
  "OpenScreenAnimationPropertyDescriptions": "The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none",
  "OrientationChangedEventDescriptions": "Default OrientationChanged event handler. <p>This event is signalled when the device's orientation has changed. It reports the new values of azimuth, pich, and roll, and it also sets the Azimuth, Pitch, and roll properties.</p> <p>Azimuth is the compass heading in degrees, pitch indicates how the device is tilted from top to bottom, and roll indicates how much the device is tilted from side to side.</p>",
  "OrientationChangedEvents": "OrientationChanged",
  "OrientationSensorHelpStringComponentPallette": "<p>Non-visible component providing information about the device's physical orientation in three dimensions: <ul> <li> <strong>Roll</strong>: 0 degrees when the device is level, increases to 90 degrees as the device is tilted up on its left side, and decreases to -90 degrees when the device is tilted up on its right side. </li> <li> <strong>Pitch</strong>: 0 degrees when the device is level, up to 90 degrees as the device is tilted so its top is pointing down, up to 180 degrees as it gets turned over. Similarly, as the device is tilted so its bottom points down, pitch decreases to -90 degrees, then further decreases to -180 degrees as it gets turned all the way over.</li> <li> <strong>Azimuth</strong>: 0 degrees when the top of the device is pointing north, 90 degrees when it is pointing east, 180 degrees when it is pointing south, 270 degrees when it is pointing west, etc.</li></ul> These measurements assume that the device itself is not moving.</p>",
  "OtherPlayerStartedEventDescriptions": "This event is signaled when another player has started (and the current player is playing or paused, but not stopped).",
  "OtherPlayerStartedEvents": "OtherPlayerStarted",
  "OtherScreenClosedEventDescriptions": "Event raised when another screen has closed and control has returned to this screen.",
  "OtherScreenClosedEvents": "OtherScreenClosed",
  "Package26Notice": "Use this option to create applications that can be submitted to the Google Play Store.<br/>These applications will not run on Android versions older than 4.0.",
  "PackageNotice": "Use this option to build apps that that will work back to Android version 2.1 (Eclair),<br/>but will not be publishable in the Google Play Store.",
  "PaintColorProperties": "PaintColor",
  "PaintColorPropertyDescriptions": "The color in which lines are drawn",
  "PanToMethodDescriptions": "Pan the map center to the given latitude and longitude and adjust the zoom level to the specified zoom.",
  "PanToMethods": "PanTo",
  "PasswordTextBoxHelpStringComponentPallette": "<p>A box for entering passwords. This is the same as the ordinary <code>TextBox</code> component except this does not display the characters typed by the user.</p><p>The value of the text in the box can be found or set through the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p> <p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p>",
  "PasswordVisibleProperties": "PasswordVisible",
  "PasswordVisiblePropertyDescriptions": "Visibility of password.",
  "PauseMethodDescriptions": "Pauses playback of the video. Playback can be resumed at the same location by calling the <code>Start</code> method.",
  "PauseMethods": "Pause",
  "PedometerHelpStringComponentPallette": "A Component that acts like a Pedometer. It senses motion via the Accerleromter and attempts to determine if a step has been taken. Using a configurable stride length, it can estimate the distance traveled as well.",
  "PermissionDeniedEventDescriptions": "Event to handle when the app user has denied a needed permission.",
  "PermissionDeniedEvents": "PermissionDenied",
  "PermissionGrantedEventDescriptions": "Event to handle when the app user has granted a needed permission. This event is only run when permission is granted in response to the AskForPermission method.",
  "PermissionGrantedEvents": "PermissionGranted",
  "PersistProperties": "Persist",
  "PersistPropertyDescriptions": "If true, variables will retain their values when off-line and the App exits. Values will be uploaded to Firebase the next time the App is run while connected to the network. This is useful for applications which will gather data while not connected to the network. Note: AppendValue and RemoveFirst will not work correctly when off-line, they require a network connection.<br/><br/> <i>Note</i>: If you set Persist on any Firebase component, on any screen, it makes all Firebase components on all screens persistent. This is a limitation of the low level Firebase library. Also be aware that if you want to set persist to true, you should do so before connecting the Companion for incremental development.",
  "PhoneCallEndedEventDescriptions": "Event indicating that a phone call has ended. If status is 1, incoming call is missed or rejected; if status is 2, incoming call is answered before hanging up; if status is 3, outgoing call is hung up. phoneNumber is the ended call phone number.",
  "PhoneCallEndedEvents": "PhoneCallEnded",
  "PhoneCallHelpStringComponentPallette": "<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber</code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall</code> method, enabling the program to launch a phone call.</p><p>Often, this component is used with the <code>ContactPicker</code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber</code> property to the contact's phone number.</p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text with the specified digits (e.g., \"6505551212\"). Dashes, dots, and parentheses may be included (e.g., \"(650)-555-1212\") but will be ignored; spaces may not be included.</p>",
  "PhoneCallStartedEventDescriptions": "Event indicating that a phonecall has started. If status is 1, incoming call is ringing; if status is 2, outgoing call is dialled. phoneNumber is the incoming/outgoing phone number.",
  "PhoneCallStartedEvents": "PhoneCallStarted",
  "PhoneNumberListProperties": "PhoneNumberList",
  "PhoneNumberListPropertyDescriptions": "PhoneNumberList property getter method.",
  "PhoneNumberPickerHelpStringComponentPallette": "A button that, when clicked on, displays a list of the contacts' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact's name </li> <li> <code>PhoneNumber</code>: the contact's phone number </li> <li> <code>EmailAddress</code>: the contact's email address </li> <li> <code>Picture</code>: the name of the file containing the contact's image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The PhoneNumberPicker component may not work on all Android devices. For example, on Android systems before system 3.0, the returned lists of phone numbers and email addresses will be empty.",
  "PhoneNumberProperties": "PhoneNumber",
  "PhoneNumberPropertyDescriptions": "Sets the phone number to send the text message to when the SendMessage function is called.",
  "PhoneStatusHelpStringComponentPallette": "Component that returns information about the phone.",
  "PictureProperties": "Picture",
  "PicturePropertyDescriptions": "Picture URI for this contact, which can be used to retrieve the contact's photo and other fields.",
  "PitchProperties": "Pitch",
  "PitchPropertyDescriptions": "Sets the Pitch for TextToSpeech The values should be between 0 and 2 where lower values lower the tone of synthesized voice and greater values raise it.",
  "PlayMethodDescriptions": "Plays the sound specified by the Source property.",
  "PlayMethods": "Play",
  "PlayOnlyInForegroundProperties": "PlayOnlyInForeground",
  "PlayOnlyInForegroundPropertyDescriptions": "If true, the player will pause playing when leaving the current screen; if false (default option), the player continues playing whenever the current screen is displaying or not.",
  "PlaySoundFileMethodDescriptions": "Play a sound file on the robot.",
  "PlaySoundFileMethods": "PlaySoundFile",
  "PlayToneMethodDescriptions": "Make the robot play a tone.",
  "PlayToneMethods": "PlayTone",
  "PlayerHelpStringComponentPallette": "Multimedia component that plays audio and controls phone vibration. The name of a multimedia field is specified in the <code>Source</code> property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).<p>For supported audio formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>This component is best for long sound files, such as songs, while the <code>Sound</code> component is more efficient for short files, such as sound effects.</p>",
  "PlayerJoinedEventDescriptions": "Indicates that a new player has joined this game instance.",
  "PlayerJoinedEvents": "PlayerJoined",
  "PlayerLeftEventDescriptions": "Indicates that a player has left this game instance.",
  "PlayerLeftEvents": "PlayerLeft",
  "PlayersProperties": "Players",
  "PlayersPropertyDescriptions": "The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server.",
  "PointInDirectionMethodDescriptions": "Turns the sprite to point towards the point with coordinates as (x, y).",
  "PointInDirectionMethods": "PointInDirection",
  "PointTowardsMethodDescriptions": "Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.",
  "PointTowardsMethods": "PointTowards",
  "PointsFromStringProperties": "PointsFromString",
  "PointsFromStringPropertyDescriptions": "Constructs a polygon from the given list of coordinates.",
  "PointsProperties": "Points",
  "PointsPropertyDescriptions": "Gets or sets the sequence of points used to draw the polygon.",
  "PolygonHelpStringComponentPallette": "Polygon",
  "PositionChangedEventDescriptions": "Indicates that position of the slider thumb has changed.",
  "PositionChangedEvents": "PositionChanged",
  "PostFileMethodDescriptions": "Performs an HTTP POST request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.",
  "PostFileMethods": "PostFile",
  "PostMediaMethodDescriptions": "Asks the Web service to store the given media file.",
  "PostMediaMethods": "PostMedia",
  "PostTextMethodDescriptions": "Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.",
  "PostTextMethods": "PostText",
  "PostTextWithEncodingMethodDescriptions": "Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.",
  "PostTextWithEncodingMethods": "PostTextWithEncoding",
  "PressedEventDescriptions": "Touch sensor has been pressed.",
  "PressedEventEnabledProperties": "PressedEventEnabled",
  "PressedEventEnabledPropertyDescriptions": "Whether the Pressed event should fire when the touch sensor is pressed.",
  "PressedEvents": "Pressed",
  "PrimaryColorDarkProperties": "PrimaryColorDark",
  "PrimaryColorDarkPropertyDescriptions": "This is the primary color used for darker elements in Material UI.",
  "PrimaryColorProperties": "PrimaryColor",
  "PrimaryColorPropertyDescriptions": "This is the primary color used for Material UI elements, such as the ActionBar.",
  "ProgressBarFor": "Progress Bar",
  "ProjectBucketProperties": "ProjectBucket",
  "ProjectBucketPropertyDescriptions": "Gets the ProjectBucket for this FirebaseDB.",
  "ProjectIDProperties": "ProjectID",
  "ProjectIDPropertyDescriptions": "Gets the ProjectID for this CloudDB project.",
  "PromptProperties": "Prompt",
  "PromptPropertyDescriptions": "Text with the current title for the Spinner window",
  "PromptforPermissionProperties": "PromptforPermission",
  "PromptforPermissionPropertyDescriptions": "If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted.",
  "ProviderLockedProperties": "ProviderLocked",
  "ProviderLockedPropertyDescriptions": "Indicates whether the sensor should allow the developer to manually change the provider (GPS, GSM, Wifi, etc.) from which location updates are received.",
  "ProviderNameProperties": "ProviderName",
  "ProviderNamePropertyDescriptions": "Indicates the source of the location information. If there is no provider, the string \"NO PROVIDER\" is returned. This is useful primarily for debugging.",
  "ProximityChangedEventDescriptions": "Triggered when distance (in cm) of the object to the device changes.",
  "ProximityChangedEvents": "ProximityChanged",
  "ProximityChangedMethods": "ProximityChanged",
  "ProximityChangedPropertiesProperties": "ProximityChangedProperties",
  "ProximitySensorHelpStringComponentPallette": "<p>Non-visible component that can measures the proximity of an object in cm relative to the view screen of a device. This sensor is typically used to determine whether a handset is being held up to a persons ear; i.e. lets you determine how far away an object is from a device. Many devices return the absolute distance, in cm, but some return only near and far values. In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state.</p>",
  "PublicInstancesProperties": "PublicInstances",
  "PublicInstancesPropertyDescriptions": "The set of game instances that have been marked public. To ensure current values are returned, first invoke",
  "PutFileMethodDescriptions": "Performs an HTTP PUT request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.",
  "PutFileMethods": "PutFile",
  "PutTextMethodDescriptions": "Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.",
  "PutTextMethods": "PutText",
  "PutTextWithEncodingMethodDescriptions": "Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.",
  "PutTextWithEncodingMethods": "PutTextWithEncoding",
  "QueryProperties": "Query",
  "QueryPropertyDescriptions": "The query to send to the Fusion Tables API. <p>For legal query formats and examples, see the <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">Fusion Tables API v2.0 reference manual</a>.</p> <p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them.</p>",
  "RadiusProperties": "Radius",
  "RadiusPropertyDescriptions": "The radius of the circle in meters.",
  "ReadFromMethodDescriptions": "Reads text from a file in storage. Prefix the filename with / to read from a specific file on the SD card. for instance /myFile.txt will read the file /sdcard/myFile.txt. To read assets packaged with an application (also works for the Companion) start the filename with // (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from /sdcard/AppInventor/data for the Companion.",
  "ReadFromMethods": "ReadFrom",
  "ReadModeProperties": "ReadMode",
  "ReadModePropertyDescriptions": "Returns true if in read mode, false if in write mode.",
  "ReadyEventDescriptions": "Map has been initialized and is ready for user interaction.",
  "ReadyEvents": "Ready",
  "ReceiveSigned1ByteNumberMethodDescriptions": "Receive a signed 1-byte number from the connected Bluetooth device.",
  "ReceiveSigned1ByteNumberMethods": "ReceiveSigned1ByteNumber",
  "ReceiveSigned2ByteNumberMethodDescriptions": "Receive a signed 2-byte number from the connected Bluetooth device.",
  "ReceiveSigned2ByteNumberMethods": "ReceiveSigned2ByteNumber",
  "ReceiveSigned4ByteNumberMethodDescriptions": "Receive a signed 4-byte number from the connected Bluetooth device.",
  "ReceiveSigned4ByteNumberMethods": "ReceiveSigned4ByteNumber",
  "ReceiveSignedBytesMethodDescriptions": "Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.",
  "ReceiveSignedBytesMethods": "ReceiveSignedBytes",
  "ReceiveTextMethodDescriptions": "Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.",
  "ReceiveTextMethods": "ReceiveText",
  "ReceiveUnsigned1ByteNumberMethodDescriptions": "Receive an unsigned 1-byte number from the connected Bluetooth device.",
  "ReceiveUnsigned1ByteNumberMethods": "ReceiveUnsigned1ByteNumber",
  "ReceiveUnsigned2ByteNumberMethodDescriptions": "Receive a unsigned 2-byte number from the connected Bluetooth device.",
  "ReceiveUnsigned2ByteNumberMethods": "ReceiveUnsigned2ByteNumber",
  "ReceiveUnsigned4ByteNumberMethodDescriptions": "Receive a unsigned 4-byte number from the connected Bluetooth device.",
  "ReceiveUnsigned4ByteNumberMethods": "ReceiveUnsigned4ByteNumber",
  "ReceiveUnsignedBytesMethodDescriptions": "Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.",
  "ReceiveUnsignedBytesMethods": "ReceiveUnsignedBytes",
  "ReceivingEnabledProperties": "ReceivingEnabled",
  "ReceivingEnabledPropertyDescriptions": "If set to 1 (OFF) no messages will be received. If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification. Selecting the notification will bring up the app and signal the MessageReceived event. Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens. As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed.",
  "RecordVideoMethodDescriptions": "Records a video, then raises the AfterRecoding event.",
  "RecordVideoMethods": "RecordVideo",
  "RectangleHelpStringComponentPallette": "Rectangle",
  "RedisPortProperties": "RedisPort",
  "RedisPortPropertyDescriptions": "The Redis Server port to use. Defaults to 6381",
  "RedisServerProperties": "RedisServer",
  "RedisServerPropertyDescriptions": "The Redis Server to use to store data. A setting of \"DEFAULT\" means that the MIT server will be used.",
  "ReleasedEventDescriptions": "Touch sensor has been released.",
  "ReleasedEventEnabledProperties": "ReleasedEventEnabled",
  "ReleasedEventEnabledPropertyDescriptions": "Whether the Released event should fire when the touch sensor is released.",
  "ReleasedEvents": "Released",
  "RemoveFirstFromListMethodDescriptions": "Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.",
  "RemoveFirstFromListMethods": "RemoveFirstFromList",
  "RemoveFirstMethodDescriptions": "Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.",
  "RemoveFirstMethods": "RemoveFirst",
  "RequestBallotMethodDescriptions": "Send a request for a ballot to the Web service specified by the property <code>ServiceURL</code>. When the completes, one of the following events will be raised: <code>GotBallot</code>, <code>NoOpenPoll</code>, or <code>WebServiceError</code>.",
  "RequestBallotMethods": "RequestBallot",
  "RequestDirectMessagesMethodDescriptions": "Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the <code>DirectMessagesReceived</code> event and set the <code>DirectMessages</code> property to the list of messages.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>",
  "RequestDirectMessagesMethods": "RequestDirectMessages",
  "RequestFocusMethodDescriptions": "Sets the TextBox active.",
  "RequestFocusMethods": "RequestFocus",
  "RequestFollowersMethodDescriptions": "Gets who is following you.",
  "RequestFollowersMethods": "RequestFollowers",
  "RequestFriendTimelineMethodDescriptions": "Gets the most recent 20 messages in the user's timeline.",
  "RequestFriendTimelineMethods": "RequestFriendTimeline",
  "RequestHeadersProperties": "RequestHeaders",
  "RequestHeadersPropertyDescriptions": "The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values.",
  "RequestMentionsMethodDescriptions": "Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the <code>MentionsReceived</code> event and set the <code>Mentions</code> property to the list of mentions.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>",
  "RequestMentionsMethods": "RequestMentions",
  "RequestTranslationMethodDescriptions": "By providing a target language to translate to (for instance, 'es' for Spanish, 'en' for English, or 'ru' for Russian), and a word or sentence to translate, this method will request a translation to the Yandex.Translate service.Once the text is translated by the external service, the event GotTranslation will be executed.Note: Yandex.Translate will attempt to detect the source language. You can also specify prepending it to the language translation. I.e., es-ru will specify Spanish to Russian translation.",
  "RequestTranslationMethods": "RequestTranslation",
  "ResetInputScaledValueMethodDescriptions": "Reset the scaled value of an input sensor on the robot.",
  "ResetInputScaledValueMethods": "ResetInputScaledValue",
  "ResetMethodDescriptions": "Resets the step counter, distance measure and time running.",
  "ResetMethods": "Reset",
  "ResetMotorPositionMethodDescriptions": "Reset motor position.",
  "ResetMotorPositionMethods": "ResetMotorPosition",
  "ResetTachoCountMethodDescriptions": "Set the current tacho count to zero.",
  "ResetTachoCountMethods": "ResetTachoCount",
  "ResolveActivityMethodDescriptions": "Returns the name of the activity that corresponds to this ActivityStarter, or an empty string if no corresponding activity can be found.",
  "ResolveActivityMethods": "ResolveActivity",
  "ResponseFileNameProperties": "ResponseFileName",
  "ResponseFileNamePropertyDescriptions": "The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated.",
  "ResultNameProperties": "ResultName",
  "ResultNamePropertyDescriptions": "Returns the name that will be used to retrieve a result from the activity.",
  "ResultProperties": "Result",
  "ResultPropertyDescriptions": "Result property getter method.",
  "ResultTypeProperties": "ResultType",
  "ResultTypePropertyDescriptions": "Returns the MIME type from the activity.",
  "ResultUriProperties": "ResultUri",
  "ResultUriPropertyDescriptions": "Returns the URI from the activity.",
  "ResumeMethodDescriptions": "Resumes playing the sound after a pause.",
  "ResumeMethods": "Resume",
  "ReverseDirectionProperties": "ReverseDirection",
  "ReverseDirectionPropertyDescriptions": "Set whether the direction of motors is reversed or not.",
  "RollProperties": "Roll",
  "RollPropertyDescriptions": "Roll property getter method (read-only property). <p>To return meaningful values the sensor must be enabled.</p>",
  "RotateInDistanceMethodDescriptions": "Rotate the motors in a distance.",
  "RotateInDistanceMethods": "RotateInDistance",
  "RotateInDurationMethodDescriptions": "Rotate the motors in a period of time.",
  "RotateInDurationMethods": "RotateInDuration",
  "RotateInTachoCountsMethodDescriptions": "Rotate the motors in a number of tacho counts.",
  "RotateInTachoCountsMethods": "RotateInTachoCounts",
  "RotateIndefinitelyMethodDescriptions": "Start to rotate the motors.",
  "RotateIndefinitelyMethods": "RotateIndefinitely",
  "RotateSyncInDistanceMethodDescriptions": "Rotate the motors at the same speed for a distance in cm.",
  "RotateSyncInDistanceMethods": "RotateSyncInDistance",
  "RotateSyncInDurationMethodDescriptions": "Rotate the motors at the same speed in a period of time.",
  "RotateSyncInDurationMethods": "RotateSyncInDuration",
  "RotateSyncInTachoCountsMethodDescriptions": "Rotate the motors at the same speed in a number of tacho counts.",
  "RotateSyncInTachoCountsMethods": "RotateSyncInTachoCounts",
  "RotateSyncIndefinitelyMethodDescriptions": "Start to rotate the motors at the same speed.",
  "RotateSyncIndefinitelyMethods": "RotateSyncIndefinitely",
  "RotatesProperties": "Rotates",
  "RotatesPropertyDescriptions": "If true, the sprite image rotates to match the sprite's heading. If false, the sprite image does not rotate when the sprite changes heading. The sprite rotates around its centerpoint.",
  "RotationAngleProperties": "RotationAngle",
  "RotationAnglePropertyDescriptions": "Specifies the angle at which the image picture appears rotated.",
  "RotationProperties": "Rotation",
  "RotationPropertyDescriptions": "Sets or gets the rotation of the map in decimal degrees if any",
  "RowsProperties": "Rows",
  "RowsPropertyDescriptions": "Rows property getter method.",
  "SaveAsMethodDescriptions": "Saves a picture of this Canvas to the device's external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.",
  "SaveAsMethods": "SaveAs",
  "SaveFileMethodDescriptions": "Saves text to a file. If the filename begins with a slash (/) the file is written to the sdcard. For example writing to /myFile.txt will write the file to /sdcard/myFile.txt. If the filename does not start with a slash, it will be written in the programs private data directory where it will not be accessible to other programs on the phone. There is a special exception for the AI Companion where these files are written to /sdcard/AppInventor/data to facilitate debugging. Note that this block will overwrite a file if it already exists.If you want to add content to a file use the append block.",
  "SaveFileMethods": "SaveFile",
  "SaveMethodDescriptions": "Saves the pedometer state to the phone. Permits permits accumulation of steps and distance between invocations of an App that uses the pedometer. Different Apps will have their own saved state.",
  "SaveMethods": "Save",
  "SaveResponseProperties": "SaveResponse",
  "SaveResponsePropertyDescriptions": "Whether the response should be saved in a file.",
  "SavedRecordingProperties": "SavedRecording",
  "SavedRecordingPropertyDescriptions": "Specifies the path to the file where the recording should be stored. If this proprety is the empty string, then starting a recording will create a file in an appropriate location. If the property is not the empty string, it should specify a complete path to a file in an existing directory, including a file name with the extension .3gp.",
  "ScalePictureToFitProperties": "ScalePictureToFit",
  "ScalePictureToFitPropertyDescriptions": "Specifies whether the image should be resized to match the size of the ImageView.",
  "ScaleUnitsProperties": "ScaleUnits",
  "ScaleUnitsPropertyDescriptions": "",
  "ScalingProperties": "Scaling",
  "ScalingPropertyDescriptions": "This property determines how the picture scales according to the Height or Width of the Image. Scale proportionally (0) preserves the picture aspect ratio. Scale to fit (1) matches the Image area, even if the aspect ratio changes.",
  "ScreenOrientationChangedEventDescriptions": "Screen orientation changed",
  "ScreenOrientationChangedEvents": "ScreenOrientationChanged",
  "ScreenOrientationProperties": "ScreenOrientation",
  "ScreenOrientationPropertyDescriptions": "The requested screen orientation, specified as a text value. Commonly used values are landscape, portrait, sensor, user and unspecified. See the Android developer documentation for ActivityInfo.Screen_Orientation for the complete list of possible settings.",
  "ScrollableProperties": "Scrollable",
  "ScrollablePropertyDescriptions": "When checked, there will be a vertical scrollbar on the screen, and the height of the application can exceed the physical height of the device. When unchecked, the application height is constrained to the height of the device.",
  "SdkLevelMethodDescriptions": "Get the current Android SDK Level",
  "SdkLevelMethods": "SdkLevel",
  "SearchResultsProperties": "SearchResults",
  "SearchResultsPropertyDescriptions": "This property, which is initially empty, is set to a list of search results after the program: <ol><li>Calls the <code>SearchTwitter</code> method.</li> <li>Waits for the <code>SearchSuccessful</code> event.</li></ol>The value of the property will then be the same as the parameter to <code>SearchSuccessful</code>. Note that it is not necessary to call the <code>Authorize</code> method before calling <code>SearchTwitter</code>.",
  "SearchSuccessfulEventDescriptions": "This event is raised when the results of the search requested through <code>SearchSuccessful</code> have been retrieved. A list of the results can then be found in the <code>results</code> parameter or the <code>Results</code> property.",
  "SearchSuccessfulEvents": "SearchSuccessful",
  "SearchTwitterMethodDescriptions": "This searches Twitter for the given String query.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>",
  "SearchTwitterMethods": "SearchTwitter",
  "SecondMethodDescriptions": "The second of the minute",
  "SecondMethods": "Second",
  "SecureProperties": "Secure",
  "SecurePropertyDescriptions": "Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.",
  "SeekToMethodDescriptions": "Seeks to the requested time (specified in milliseconds) in the video. If the video is paused, the frame shown will not be updated by the seek. The player can jump only to key frames in the video, so seeking to times that differ by short intervals may not actually move to different frames.",
  "SeekToMethods": "SeekTo",
  "SelectionColorProperties": "SelectionColor",
  "SelectionColorPropertyDescriptions": "The color of the item when it is selected.",
  "SelectionIndexProperties": "SelectionIndex",
  "SelectionIndexPropertyDescriptions": "The index of the currently selected item, starting at 1. If no item is selected, the value will be 0.",
  "SelectionProperties": "Selection",
  "SelectionPropertyDescriptions": "Returns the current selected item in the spinner",
  "Send1ByteNumberMethodDescriptions": "Send a 1-byte number to the connected Bluetooth device.",
  "Send1ByteNumberMethods": "Send1ByteNumber",
  "Send2ByteNumberMethodDescriptions": "Send a 2-byte number to the connected Bluetooth device.",
  "Send2ByteNumberMethods": "Send2ByteNumber",
  "Send4ByteNumberMethodDescriptions": "Send a 4-byte number to the connected Bluetooth device.",
  "Send4ByteNumberMethods": "Send4ByteNumber",
  "SendBallotMethodDescriptions": "Send a completed ballot to the Web service. This should not be called until the properties <code>UserId</code> and <code>UserChoice</code> have been set by the application.",
  "SendBallotMethods": "SendBallot",
  "SendBytesMethodDescriptions": "Send a list of byte values to the connected Bluetooth device.",
  "SendBytesMethods": "SendBytes",
  "SendMessageDirectMethodDescriptions": "Send a text message directly",
  "SendMessageDirectMethods": "SendMessageDirect",
  "SendMessageEvents": "SendMessage",
  "SendMessageMethodDescriptions": "Send a text message",
  "SendMessageMethods": "SendMessage",
  "SendQueryMethodDescriptions": "Send the query to the Fusiontables server.",
  "SendQueryMethods": "SendQuery",
  "SendTextMethodDescriptions": "Send text to the connected Bluetooth device.",
  "SendTextMethods": "SendText",
  "SensitivityProperties": "Sensitivity",
  "SensitivityPropertyDescriptions": "A number that encodes how sensitive the accelerometer is. The choices are: 1 = weak, 2 = moderate, 3 = strong.",
  "SensorPortProperties": "SensorPort",
  "SensorPortPropertyDescriptions": "The sensor port that the sensor is connected to.",
  "SensorValueChangedEventDescriptions": "Called then the sensor value changed.",
  "SensorValueChangedEventEnabledProperties": "SensorValueChangedEventEnabled",
  "SensorValueChangedEventEnabledPropertyDescriptions": "Whether the SensorValueChanged event should fire when the sensor value changed.",
  "SensorValueChangedEvents": "SensorValueChanged",
  "ServerCommandFailureEventDescriptions": "Indicates that a server command failed.",
  "ServerCommandFailureEvents": "ServerCommandFailure",
  "ServerCommandMethodDescriptions": "Sends the specified command to the game server.",
  "ServerCommandMethods": "ServerCommand",
  "ServerCommandSuccessEventDescriptions": "Indicates that a server command returned successfully.",
  "ServerCommandSuccessEvents": "ServerCommandSuccess",
  "ServiceAccountEmailProperties": "ServiceAccountEmail",
  "ServiceAccountEmailPropertyDescriptions": "The Service Account Email Address when service account authentication is in use.",
  "ServiceURLProperties": "ServiceURL",
  "ServiceURLPropertyDescriptions": "The URL of the Voting service",
  "ServiceUrlProperties": "ServiceUrl",
  "ServiceUrlPropertyDescriptions": "The URL of the game server.",
  "SetAmbientModeMethodDescriptions": "Make the sensor read the light level without reflected light.",
  "SetAmbientModeMethods": "SetAmbientMode",
  "SetAngleModeMethodDescriptions": "Measures the orientation of the sensor.",
  "SetAngleModeMethods": "SetAngleMode",
  "SetBackgroundPixelColorMethodDescriptions": "Sets the color of the specified point. This differs from DrawPoint by having an argument for color.",
  "SetBackgroundPixelColorMethods": "SetBackgroundPixelColor",
  "SetBrickNameMethodDescriptions": "Set the brick name of the robot.",
  "SetBrickNameMethods": "SetBrickName",
  "SetCenterMethodDescriptions": "Moves the Rectangle so that it is centered on the given latitude and longitude while attempting to maintain the width and height of the Rectangle as measured from the center to the edges.",
  "SetCenterMethods": "SetCenter",
  "SetCmUnitMethodDescriptions": "Measure the distance in centimeters.",
  "SetCmUnitMethods": "SetCmUnit",
  "SetColorModeMethodDescriptions": "Enter the color detection mode.",
  "SetColorModeMethods": "SetColorMode",
  "SetDateToDisplayFromInstantMethodDescriptions": "Allows the user to set the date from the instant to be displayed when the date picker opens.",
  "SetDateToDisplayFromInstantMethods": "SetDateToDisplayFromInstant",
  "SetDateToDisplayMethodDescriptions": "Allows the user to set the date to be displayed when the date picker opens.Valid values for the month field are 1-12 and 1-31 for the day field.",
  "SetDateToDisplayMethods": "SetDateToDisplay",
  "SetInchUnitMethodDescriptions": "Measure the distance in inches.",
  "SetInchUnitMethods": "SetInchUnit",
  "SetInputModeMethodDescriptions": "Configure an input sensor on the robot.",
  "SetInputModeMethods": "SetInputMode",
  "SetInstanceMethodDescriptions": "Sets InstanceId and joins the specified instance.",
  "SetInstanceMethods": "SetInstance",
  "SetLeaderMethodDescriptions": "Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.",
  "SetLeaderMethods": "SetLeader",
  "SetLocationMethodDescriptions": "Set the location of the marker.",
  "SetLocationMethods": "SetLocation",
  "SetOutputStateMethodDescriptions": "Sets the output state of a motor on the robot.",
  "SetOutputStateMethods": "SetOutputState",
  "SetRateModeMethodDescriptions": "Measures the angular velocity of the sensor.",
  "SetRateModeMethods": "SetRateMode",
  "SetReflectedModeMethodDescriptions": "Make the sensor read the light level with reflected light.",
  "SetReflectedModeMethods": "SetReflectedMode",
  "SetStatusMethods": "SetStatus",
  "SetTimeToDisplayFromInstantMethodDescriptions": "Set the time from the instant to be shown in the Time Picker popup. Current time is shown by default.",
  "SetTimeToDisplayFromInstantMethods": "SetTimeToDisplayFromInstant",
  "SetTimeToDisplayMethodDescriptions": "Set the time to be shown in the Time Picker popup. Current time is shown by default.",
  "SetTimeToDisplayMethods": "SetTimeToDisplay",
  "ShakingEventDescriptions": "Indicates the device started being shaken or continues to be shaken.",
  "ShakingEvents": "Shaking",
  "ShapeProperties": "Shape",
  "ShapePropertyDescriptions": "Returns the style of the button.",
  "ShareFileMethodDescriptions": "Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.",
  "ShareFileMethods": "ShareFile",
  "ShareFileWithMessageMethodDescriptions": "Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to choose one from the list. The selected app will open with the file and message inserted on it.",
  "ShareFileWithMessageMethods": "ShareFileWithMessage",
  "ShareMessageMethodDescriptions": "Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.",
  "ShareMessageMethods": "ShareMessage",
  "SharingHelpStringComponentPallette": "Sharing is a non-visible component that enables sharing files and/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.<br>The file path can be taken directly from other components such as the Camera or the ImagePicker, but can also be specified directly to read from storage. Be aware that different devices treat storage differently, so a few things to try if, for instance, you have a file called arrow.gif in the folder <code>Appinventor/assets</code>, would be: <ul><li><code>\"file:///sdcard/Appinventor/assets/arrow.gif\"</code></li> or <li><code>\"/storage/Appinventor/assets/arrow.gif\"</code></li></ul>",
  "ShowAlertMethodDescriptions": "Display a temporary notification",
  "ShowAlertMethods": "ShowAlert",
  "ShowChooseDialogMethodDescriptions": "Shows a dialog box with two buttons, from which the user can choose. If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event. The \"choice\" parameter to AfterChoosing will be the text on the button that was pressed, or \"Cancel\" if the CANCEL button was pressed.",
  "ShowChooseDialogMethods": "ShowChooseDialog",
  "ShowCompassProperties": "ShowCompass",
  "ShowCompassPropertyDescriptions": "Show a compass on the map. If the device provides a digital compass, orientation changes will be used to rotate the compass icon.",
  "ShowFeedbackProperties": "ShowFeedback",
  "ShowFeedbackPropertyDescriptions": "Specifies if a visual feedback should be shown for a TimePicker that as an image as background.",
  "ShowFilterBarProperties": "ShowFilterBar",
  "ShowFilterBarPropertyDescriptions": "Sets visibility of ShowFilterBar. True will show the bar, False will hide it.",
  "ShowInfoboxMethodDescriptions": "Show the infobox for the Rectangle. This will show the infobox even if EnableInfobox is set to false.",
  "ShowInfoboxMethods": "ShowInfobox",
  "ShowListsAsJsonProperties": "ShowListsAsJson",
  "ShowListsAsJsonPropertyDescriptions": "If false, lists will be converted to strings using Lisp notation, i.e., as symbols separated by spaces, e.g., (a 1 b2 (c d). If true, lists will appear as in Json or Python, e.g. [\"a\", 1, \"b\", 2, [\"c\", \"d\"]]. This property appears only in Screen 1, and the value for Screen 1 determines the behavior for all screens. The property defaults to \"false\" meaning that the App Inventor programmer must explicitly set it to \"true\" if JSON/Python syntax is desired. At some point in the future we will alter the system so that new projects are created with this property set to \"true\" by default. Existing projects will not be impacted. The App Inventor programmer can also set it back to \"false\" in newer projects if desired.",
  "ShowLoadingDialogProperties": "ShowLoadingDialog",
  "ShowLoadingDialogPropertyDescriptions": "Setter for the loading dialog's visibility.",
  "ShowMessageDialogMethodDescriptions": "Display an alert dialog with a single button that dismisses the alert.",
  "ShowMessageDialogMethods": "ShowMessageDialog",
  "ShowPasswordDialogMethodDescriptions": "Shows a dialog box where the user can enter password (input is masked), after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering password will raise the AfterTextInput event. The \"response\" parameter to AfterTextInput will be the entered password, or \"Cancel\" if CANCEL button was pressed.",
  "ShowPasswordDialogMethods": "ShowPasswordDialog",
  "ShowProgressDialogMethodDescriptions": "Shows a dialog box with an optional title and message (use empty strings if they are not wanted). This dialog box contains a spinning artifact to indicate that the program is working. It cannot be canceled by the user but must be dismissed by the App Inventor Program by using the DismissProgressDialog block.",
  "ShowProgressDialogMethods": "ShowProgressDialog",
  "ShowScaleProperties": "ShowScale",
  "ShowScalePropertyDescriptions": "Shows a scale reference on the map.",
  "ShowStatusBarProperties": "ShowStatusBar",
  "ShowStatusBarPropertyDescriptions": "The status bar is the topmost bar on the screen. This property reports whether the status bar is visible.",
  "ShowTextDialogMethodDescriptions": "Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event. The \"response\" parameter to AfterTextInput will be the text that was entered, or \"Cancel\" if the CANCEL button was pressed.",
  "ShowTextDialogMethods": "ShowTextDialog",
  "ShowUserProperties": "ShowUser",
  "ShowUserPropertyDescriptions": "Show the user's location on the map.",
  "ShowZoomProperties": "ShowZoom",
  "ShowZoomPropertyDescriptions": "Show the zoom controls on the map.",
  "SimpleStepEventDescriptions": "This event is run when a raw step is detected",
  "SimpleStepEvents": "SimpleStep",
  "SimpleStepsProperties": "SimpleSteps",
  "SimpleStepsPropertyDescriptions": "The number of simple steps taken since the pedometer has started.",
  "SizingProperties": "Sizing",
  "SizingPropertyDescriptions": "If set to fixed, screen layouts will be created for a single fixed-size screen and autoscaled. If set to responsive, screen layouts will use the actual resolution of the device. See the documentation on responsive design in App Inventor for more information. This property appears on Screen1 only and controls the sizing for all screens in the app.",
  "SliderHelpStringComponentPallette": "A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.",
  "SoundHelpStringComponentPallette": "<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.</p> <p>For supported sound file formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>This <code>Sound</code> component is best for short sound files, such as sound effects, while the <code>Player</code> component is more efficient for longer sounds, such as songs.</p><p>You might get an error if you attempt to play a sound immeditely after setting the source.</p>",
  "SoundRecorderHelpStringComponentPallette": "<p>Multimedia component that records audio.</p>",
  "SourceProperties": "Source",
  "SourcePropertyDescriptions": "The \"path\" to the video. Usually, this will be the name of the video file, which should be added in the Designer.",
  "SouthLatitudeProperties": "SouthLatitude",
  "SouthLatitudePropertyDescriptions": "",
  "SpeakMethodDescriptions": "Speaks the given message.",
  "SpeakMethods": "Speak",
  "SpeechRateProperties": "SpeechRate",
  "SpeechRatePropertyDescriptions": "Sets the SpeechRate for TextToSpeech. The values should be between 0 and 2 where lower values slow down the pitch and greater values accelerate it.",
  "SpeechRecognizerHelpStringComponentPallette": "Component for using Voice Recognition to convert from speech to text",
  "SpeedProperties": "Speed",
  "SpeedPropertyDescriptions": "Sets the speed with which this sprite should move.",
  "SpinnerHelpStringComponentPallette": "<p>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting the<code>ElementsFromString</code> property to a string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor. Spinners are created with the first item already selected. So selecting it does not generate an After Picking event. Consequently it's useful to make the first Spinner item be a non-choice like \"Select from below...\". </p>",
  "StartActivityMethodDescriptions": "Start the activity corresponding to this ActivityStarter.",
  "StartActivityMethods": "StartActivity",
  "StartDragEventDescriptions": "The user started a drag operation.",
  "StartDragEvents": "StartDrag",
  "StartMethodDescriptions": "Starts playback of the video.",
  "StartMethods": "Start",
  "StartProgramMethodDescriptions": "Start execution of a previously downloaded program on the robot.",
  "StartProgramMethods": "StartProgram",
  "StartedMovingEventDescriptions": "Event for StartedMoving",
  "StartedMovingEvents": "StartedMoving",
  "StartedRecordingEventDescriptions": "Indicates that the recorder has started, and can be stopped.",
  "StartedRecordingEvents": "StartedRecording",
  "StatusChangedEventDescriptions": "Indicates that the status of the location provider service has changed, such as when a provider is lost or a new provider starts being used.",
  "StatusChangedEvents": "StatusChanged",
  "StopAcceptingMethodDescriptions": "Stop accepting an incoming connection.",
  "StopAcceptingMethods": "StopAccepting",
  "StopBeforeDisconnectProperties": "StopBeforeDisconnect",
  "StopBeforeDisconnectPropertyDescriptions": "Whether to stop the drive motors before disconnecting.",
  "StopDetectionTimeoutProperties": "StopDetectionTimeout",
  "StopDetectionTimeoutPropertyDescriptions": "The duration in milliseconds of idleness (no steps detected) after which to go into a \"stopped\" state",
  "StopDragEventDescriptions": "The user stopped a drag operation.",
  "StopDragEvents": "StopDrag",
  "StopFollowingMethodDescriptions": "Stops following a user.",
  "StopFollowingMethods": "StopFollowing",
  "StopMethodDescriptions": "Resets to start of video and pauses it if video was playing.",
  "StopMethods": "Stop",
  "StopProgramMethodDescriptions": "Stop execution of the currently running program on the robot.",
  "StopProgramMethods": "StopProgram",
  "StopSoundMethodDescriptions": "Stop any sound on the robot.",
  "StopSoundMethods": "StopSound",
  "StopSoundPlaybackMethodDescriptions": "Stop sound playback.",
  "StopSoundPlaybackMethods": "StopSoundPlayback",
  "StoppedMovingEventDescriptions": "Event for StoppedMoving",
  "StoppedMovingEvents": "StoppedMoving",
  "StoppedRecordingEventDescriptions": "Indicates that the recorder has stopped, and can be started again.",
  "StoppedRecordingEvents": "StoppedRecording",
  "StoreValueMethodDescriptions": "Asks the Web service to store the given value under the given tag",
  "StoreValueMethods": "StoreValue",
  "StrideLengthProperties": "StrideLength",
  "StrideLengthPropertyDescriptions": "Set the average stride length in meters.",
  "StrokeColorProperties": "StrokeColor",
  "StrokeColorPropertyDescriptions": "The paint color used to outline the Rectangle.",
  "StrokeWidthProperties": "StrokeWidth",
  "StrokeWidthPropertyDescriptions": "The width of the stroke used to outline the Rectangle.",
  "SwitchHelpStringComponentPallette": "Toggle switch that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.",
  "SystemTimeMethodDescriptions": "The phone's internal time",
  "SystemTimeMethods": "SystemTime",
  "TableArrangementHelpStringComponentPallette": "<p>A formatting element in which to place components that should be displayed in tabular form.</p>",
  "TachoCountChangedEventDescriptions": "Called when the tacho count has changed.",
  "TachoCountChangedEventEnabledProperties": "TachoCountChangedEventEnabled",
  "TachoCountChangedEventEnabledPropertyDescriptions": "Whether the TachoCountChanged event should fire when the angle is changed.",
  "TachoCountChangedEvents": "TachoCountChanged",
  "TagListEventDescriptions": "Event triggered when we have received the list of known tags. Used with the \"GetTagList\" Function.",
  "TagListEvents": "TagList",
  "TagReadEventDescriptions": "Indicates that a new tag has been detected. Currently this is only a plain text tag, as specified in the manifest. See Compiler.java.",
  "TagReadEvents": "TagRead",
  "TagWrittenEventDescriptions": "Event for TagWritten",
  "TagWrittenEvents": "TagWritten",
  "TakePictureMethodDescriptions": "Takes a picture, then raises the AfterPicture event. If useFront is true, adds an extra to the intent that requests the front-facing camera.",
  "TakePictureMethods": "TakePicture",
  "TapAtPointEventDescriptions": "The user tapped at a point on the map.",
  "TapAtPointEvents": "TapAtPoint",
  "TextAlignmentProperties": "TextAlignment",
  "TextAlignmentPropertyDescriptions": "Left, center, or right.",
  "TextBoxHelpStringComponentPallette": "<p>A box for the user to enter text. The initial or user-entered text value is in the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p><p>The <code>MultiLine</code> property determines if the text can havemore than one line. For a single line text box, the keyboard will closeautomatically when the user presses the Done key. To close the keyboard for multiline text boxes, the app should use the HideKeyboard method or rely on the user to press the Back key.</p><p>The <code> NumbersOnly</code> property restricts the keyboard to acceptnumeric input only.</p><p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox</code> instead.</p>",
  "TextColorProperties": "TextColor",
  "TextColorPropertyDescriptions": "Color for button text.",
  "TextInputCanceledEventDescriptions": "Event raised when the user canceled ShowTextDialog.",
  "TextInputCanceledEvents": "TextInputCanceled",
  "TextProperties": "Text",
  "TextPropertyDescriptions": "Text to display on TimePicker.",
  "TextSizeProperties": "TextSize",
  "TextSizePropertyDescriptions": "The text size of the listview items.",
  "TextToSpeechHelpStringComponentPallette": "The TestToSpeech component speaks a given text aloud. You can set the pitch and the rate of speech. <p>You can also set a language by supplying a language code. This changes the pronounciation of words, not the actual language spoken. For example, setting the language to French and speaking English text will sound like someone speaking English (en) with a French accent.</p> <p>You can also specify a country by supplying a country code. This can affect the pronounciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.</p> <p>The languages and countries available depend on the particular device, and can be listed with the AvailableLanguages and AvailableCountries properties.</p>",
  "TextToWriteProperties": "TextToWrite",
  "TextToWritePropertyDescriptions": "Returns the content of the text that's going to be written to the tag.",
  "TextingHelpStringComponentPallette": "<p>A component that will, when the <code>SendMessage</code> method is called, send the text message specified in the <code>Message</code> property to the phone number specified in the <code>PhoneNumber</code> property.</p> <p>If the <code>ReceivingEnabled</code> property is set to 1 messages will <b>not</b> be received. If <code>ReceivingEnabled</code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled</code> is set to 3, messages will be received when the application is running <b>and</b> when the application is not running they will be queued and a notification displayed to the user.</p> <p>When a message arrives, the <code>MessageReceived</code> event is raised and provides the sending number and message.</p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it's not visible on the screen) and, moreso, even if the app is not running, so long as it's installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar. Selecting the notification will bring up the app. As an app developer, you'll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.</p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.</p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.</p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker</code> component, which lets the users select a phone numbers from the ones stored in the the phone's contacts.</p>",
  "ThemeProperties": "Theme",
  "ThemePropertyDescriptions": "Sets the theme used by the application.",
  "ThumbColorActiveProperties": "ThumbColorActive",
  "ThumbColorActivePropertyDescriptions": "Returns the switch's thumb color (button that toggles back and forth) when the switch is ON/Checked",
  "ThumbColorInactiveProperties": "ThumbColorInactive",
  "ThumbColorInactivePropertyDescriptions": "Returns the switch's thumb color (button that toggles back and forth) when the switch is Off/Unchecked",
  "ThumbEnabledProperties": "ThumbEnabled",
  "ThumbEnabledPropertyDescriptions": "Sets whether or not to display the slider thumb.",
  "ThumbPositionProperties": "ThumbPosition",
  "ThumbPositionPropertyDescriptions": "Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue.",
  "TimeIntervalProperties": "TimeInterval",
  "TimeIntervalPropertyDescriptions": "Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after.",
  "TimePickerHelpStringComponentPallette": "<p>A button that, when clicked on, launches a popup dialog to allow the user to select a time.</p>",
  "TimerAlwaysFiresProperties": "TimerAlwaysFires",
  "TimerAlwaysFiresPropertyDescriptions": "Will fire even when application is not showing on the screen if true",
  "TimerEnabledProperties": "TimerEnabled",
  "TimerEnabledPropertyDescriptions": "Fires timer if true",
  "TimerEventDescriptions": "Timer has gone off.",
  "TimerEvents": "Timer",
  "TimerIntervalProperties": "TimerInterval",
  "TimerIntervalPropertyDescriptions": "Interval between timer events in ms",
  "TinyDBHelpStringComponentPallette": "TinyDB is a non-visible component that stores data for an app. <p> Apps created with App Inventor are initialized each time they run: If an app sets the value of a variable and the user then quits the app, the value of that variable will not be remembered the next time the app is run. In contrast, TinyDB is a <em> persistent </em> data store for the app, that is, the data stored there will be available each time the app is run. An example might be a game that saves the high score and retrieves it each time the game is played. </<p> <p> Data items are strings stored under <em>tags</em> . To store a data item, you specify the tag it should be stored under. Subsequently, you can retrieve the data that was stored under a given tag. </p><p> There is only one data store per app. Even if you have multiple TinyDB components, they will use the same data store. To get the effect of separate stores, use different keys. Also each app has its own data store. You cannot use TinyDB to pass data between two different apps on the phone, although you <em>can</em> use TinyDb to shares data between the different screens of a multi-screen app. </p> <p>When you are developing apps using the AI Companion, all the apps using that companion will share the same TinyDb. That sharing will disappear once the apps are packaged. But, during development, you should be careful to clear the TinyDb each time you start working on a new app.</p>",
  "TinyWebDBHelpStringComponentPallette": "Non-visible component that communicates with a Web service to store and retrieve information.",
  "TitleProperties": "Title",
  "TitlePropertyDescriptions": "The title displayed in the info window that appears when the user clicks on the Rectangle.",
  "TitleVisibleProperties": "TitleVisible",
  "TitleVisiblePropertyDescriptions": "The title bar is the top gray bar on the screen. This property reports whether the title bar is visible.",
  "ToggleDirectionMethodDescriptions": "Toggle the direction of motors.",
  "ToggleDirectionMethods": "ToggleDirection",
  "TokenProperties": "Token",
  "TokenPropertyDescriptions": "This field contains the authentication token used to login to the backed Redis server. For the \"DEFAULT\" server, do not edit this value, the system will fill it in for you. A system administrator may also provide a special value to you which can be used to share data between multiple projects from multiple people. If using your own Redis server, set a password in the server's config and enter it here.",
  "TopOfRangeProperties": "TopOfRange",
  "TopOfRangePropertyDescriptions": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.",
  "TouchDownEventDescriptions": "Indicates that the TimePicker was pressed down.",
  "TouchDownEvents": "TouchDown",
  "TouchUpEventDescriptions": "Indicates that the TimePicker has been released.",
  "TouchUpEvents": "TouchUp",
  "TouchedEventDescriptions": "When the user touches the sprite and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas",
  "TouchedEvents": "Touched",
  "TrackColorActiveProperties": "TrackColorActive",
  "TrackColorActivePropertyDescriptions": "Returns the switch's track color",
  "TrackColorInactiveProperties": "TrackColorInactive",
  "TrackColorInactivePropertyDescriptions": "Color of the toggle track when switched off",
  "TurnClockwiseIndefinitelyMethodDescriptions": "Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.",
  "TurnClockwiseIndefinitelyMethods": "TurnClockwiseIndefinitely",
  "TurnCounterClockwiseIndefinitelyMethodDescriptions": "Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.",
  "TurnCounterClockwiseIndefinitelyMethods": "TurnCounterClockwiseIndefinitely",
  "TutorialURLProperties": "TutorialURL",
  "TutorialURLPropertyDescriptions": "A URL to use to populate the Tutorial Sidebar while editing a project. Used as a teaching aid.",
  "TweetMethodDescriptions": "This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. <p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>",
  "TweetMethods": "Tweet",
  "TweetWithImageMethodDescriptions": "This sends a tweet as the logged-in user with the specified Text and a path to the image to be uploaded, which will be trimmed if it exceeds 160 characters. If an image is not found or invalid, only the text will be tweeted.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>",
  "TweetWithImageMethods": "TweetWithImage",
  "TwitPic_API_KeyProperties": "TwitPic_API_Key",
  "TwitPic_API_KeyPropertyDescriptions": "TwitPicAPIkey property getter method.",
  "TwitterHelpStringComponentPallette": "A non-visible component that enables communication with <a href=\"http://www.twitter.com\" target=\"_blank\">Twitter</a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized</code> event), many more operations are available:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter</code>)</li><li> Sending a Tweet (<code>Tweet</code>) </li><li> Sending a Tweet with an Image (<code>TweetWithImage</code>) </li><li> Directing a message to a specific user (<code>DirectMessage</code>)</li> <li> Receiving the most recent messages directed to the logged-in user (<code>RequestDirectMessages</code>)</li> <li> Following a specific user (<code>Follow</code>)</li><li> Ceasing to follow a specific user (<code>StopFollowing</code>)</li><li> Getting a list of users following the logged-in user (<code>RequestFollowers</code>)</li> <li> Getting the most recent messages of users followed by the logged-in user (<code>RequestFriendTimeline</code>)</li> <li> Getting the most recent mentions of the logged-in user (<code>RequestMentions</code>)</li></ul></p> <p>You must obtain a Consumer Key and Consumer Secret for Twitter authorization specific to your app from http://twitter.com/oauth_clients/new",
  "TypeProperties": "Type",
  "TypePropertyDescriptions": "The type of the feature. For rectangles, this returns the text \"Rectangle\".",
  "UnauthenticateMethodDescriptions": "If you are having difficulty with the Companion and you are switching between different Firebase accounts, you may need to use this function to clear internal Firebase caches. You can just use the \"Do It\" function on this block in the blocks editor. Note: You should not normally need to use this block as part of an application.",
  "UnauthenticateMethods": "Unauthenticate",
  "UnitProperties": "Unit",
  "UnitPropertyDescriptions": "Specifies the unit of distance.",
  "UnspecifiedPropertyCategory": "Unspecified",
  "UriDecodeMethodDescriptions": "Decodes the encoded text value.",
  "UriDecodeMethods": "UriDecode",
  "UriEncodeMethodDescriptions": "Encodes the given text value so that it can be used in a URL.",
  "UriEncodeMethods": "UriEncode",
  "UrlProperties": "Url",
  "UrlPropertyDescriptions": "The URL for the web request.",
  "UseExternalScannerProperties": "UseExternalScanner",
  "UseExternalScannerPropertyDescriptions": "If true App Inventor will look for and use an external scanning program such as \"Bar Code Scanner.\"",
  "UseFrontProperties": "UseFront",
  "UseFrontPropertyDescriptions": "Returns true if the front-facing camera is to be used (when available)",
  "UseGPSProperties": "UseGPS",
  "UseGPSPropertyDescriptions": "",
  "UseLegacyProperties": "UseLegacy",
  "UseLegacyPropertyDescriptions": "If true, an app can retain their older behaviour.",
  "UseSSLProperties": "UseSSL",
  "UseSSLPropertyDescriptions": "Set to true to use SSL to talk to CloudDB/Redis server. This should be set to True for the \"DEFAULT\" server.",
  "UseServiceAuthenticationProperties": "UseServiceAuthentication",
  "UseServiceAuthenticationPropertyDescriptions": "Indicates whether a service account should be used for authentication",
  "UserChoiceProperties": "UserChoice",
  "UserChoicePropertyDescriptions": "The ballot choice to send to the server, which must be set before <code>SendBallot</code> is called. This must be one of <code>BallotOptions</code>.",
  "UserEmailAddressProperties": "UserEmailAddress",
  "UserEmailAddressPropertyDescriptions": "The email address associated with this device. This property has been deprecated and always returns the empty text value.",
  "UserEmailAddressSetEventDescriptions": "Indicates that the user email address has been set.",
  "UserEmailAddressSetEvents": "UserEmailAddressSet",
  "UserIdProperties": "UserId",
  "UserIdPropertyDescriptions": "A text identifying the voter that is sent to the Voting server along with the vote. This must be set before <code>SendBallot</code> is called.",
  "UserLatitudeProperties": "UserLatitude",
  "UserLatitudePropertyDescriptions": "Returns the user's latitude if ShowUser is enabled.",
  "UserLongitudeProperties": "UserLongitude",
  "UserLongitudePropertyDescriptions": "Returns the user's longitude if ShowUser is enabled.",
  "UsernameProperties": "Username",
  "UsernamePropertyDescriptions": "The user name of the authorized user. Empty if there is no authorized user.",
  "UsesLocationProperties": "UsesLocation",
  "UsesLocationPropertyDescriptions": "Whether or not to give the application permission to use the Javascript geolocation API. This property is available only in the designer.",
  "ValueStoredEventDescriptions": "Event indicating that a StoreValue server request has succeeded.",
  "ValueStoredEvents": "ValueStored",
  "VersionCodeProperties": "VersionCode",
  "VersionCodePropertyDescriptions": "An integer value which must be incremented each time a new Android Application Package File (APK) is created for the Google Play Store.",
  "VersionNameProperties": "VersionName",
  "VersionNamePropertyDescriptions": "A string which can be changed to allow Google Play Store users to distinguish between different versions of the App.",
  "VerticalArrangementHelpStringComponentPallette": "<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p>",
  "VerticalScrollArrangementHelpStringComponentPallette": "<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p><p> This version is scrollable",
  "VibrateMethodDescriptions": "Vibrates for the specified number of milliseconds.",
  "VibrateMethods": "Vibrate",
  "VideoPlayerHelpStringComponentPallette": "A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the <code>Start</code>, <code>Pause</code>, and <code>SeekTo</code> methods. <p>Video files should be in 3GPP (.3gp) or MPEG-4 (.mp4) formats. For more details about legal formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.</p><p>You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.",
  "ViewContactMethodDescriptions": "view a contact via its URI",
  "ViewContactMethods": "ViewContact",
  "VisibleProperties": "Visible",
  "VisiblePropertyDescriptions": "Returns true iff the WebViewer is visible.",
  "VolumeProperties": "Volume",
  "VolumePropertyDescriptions": "Sets the volume to a number between 0 and 100. Values less than 0 will be treated as 0, and values greater than 100 will be treated as 100.",
  "VotingHelpStringComponentPallette": "The Voting component communicates with a Web service to retrieve a ballot and send back users' votes. <p>The application should call the method <code>RequestBallot</code>, usually in the <code>Initialize</code> event handler, in order to get the ballot question and options from the Web service (specified by the <code>ServiceURL</code> property). Depending on the response from the Web service, the system will raise one of the following three events: <ol> <li> <code>GotBallot</code>, indicating that the ballot question and options were retrieved and the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set.</li> <li> <code>NoOpenPoll</code>, indicating that no ballot question is available.</li> <li> <code>WebServiceError</code>, indicating that the service did not provide a legal response and providing an error messages.</li> </ol></p> <p>After getting the ballot, the application should allow the user to make a choice from among <code>BallotOptions</code> and set the property <code>UserChoice</code> to that choice. The application should also set <code>UserId</code> to specify which user is voting.</p> <p>Once the application has set <code>UserChoice</code> and <code>UserId</code>, the application can call <code>SendBallot</code> to send this information to the Web service. If the service successfully receives the vote, the event <code>GotBallotConfirmation</code> will be raised. Otherwise, the event <code>WebServiceError</code> will be raised with the appropriate error message.</p>",
  "WalkStepEventDescriptions": "This event is run when a walking step is detected. A walking step is a step that appears to be involved in forward motion.",
  "WalkStepEvents": "WalkStep",
  "WalkStepsProperties": "WalkSteps",
  "WalkStepsPropertyDescriptions": "the number of walk steps taken since the pedometer has started.",
  "WebHelpStringComponentPallette": "Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.",
  "WebRTCProperties": "WebRTC",
  "WebRTCPropertyDescriptions": "Set whether or not we will use WebRTC to communicate with the server",
  "WebServiceErrorEventDescriptions": "Event indicating that the communication with the Web service resulted in an error.",
  "WebServiceErrorEvents": "WebServiceError",
  "WebViewStringChangeEventDescriptions": "When the JavaScript calls AppInventor.setWebViewString this event is run.",
  "WebViewStringChangeEvents": "WebViewStringChange",
  "WebViewStringProperties": "WebViewString",
  "WebViewStringPropertyDescriptions": "Gets the WebView's String, which is viewable through Javascript in the WebView as the window.AppInventor object",
  "WebViewerHelpStringComponentPallette": "Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser. For example, pressing the phone's hardware Back key will exit the app, rather than move back in the browser history.<p />You can use the WebViewer.WebViewString property to communicate between your app and Javascript code running in the Webviewer page. In the app, you get and set WebViewString. In the WebViewer, you include Javascript that references the window.AppInventor object, using the methoods </em getWebViewString()</em> and <em>setWebViewString(text)</em>. <p />For example, if the WebViewer opens to a page that contains the Javascript command <br /> <em>document.write(\"The answer is\" + window.AppInventor.getWebViewString());</em> <br />and if you set WebView.WebVewString to \"hello\", then the web page will show </br ><em>The answer is hello</em>. <br />And if the Web page contains Javascript that executes the command <br /><em>window.AppInventor.setWebViewString(\"hello from Javascript\")</em>, <br />then the value of the WebViewString property will be <br /><em>hello from Javascript</em>.",
  "WeekdayMethodDescriptions": "The day of the week represented as a number from 1 (Sunday) to 7 (Saturday)",
  "WeekdayMethods": "Weekday",
  "WeekdayNameMethodDescriptions": "The name of the day of the week",
  "WeekdayNameMethods": "WeekdayName",
  "WestLongitudeProperties": "WestLongitude",
  "WestLongitudePropertyDescriptions": "",
  "WheelDiameterProperties": "WheelDiameter",
  "WheelDiameterPropertyDescriptions": "The diameter of the wheels used for driving.",
  "WidthPercentProperties": "WidthPercent",
  "WidthPercentPropertyDescriptions": "Specifies the horizontal width of the WebViewer as a percentage of the width of the Screen.",
  "WidthProperties": "Width",
  "WidthPropertyDescriptions": "Specifies the horizontal width of the WebViewer, measured in pixels.",
  "WithinRangeEventDescriptions": "Distance has gone within the range.",
  "WithinRangeEventEnabledProperties": "WithinRangeEventEnabled",
  "WithinRangeEventEnabledPropertyDescriptions": "Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.",
  "WithinRangeEvents": "WithinRange",
  "WriteTypeProperties": "WriteType",
  "WriteTypePropertyDescriptions": "",
  "XAccelProperties": "XAccel",
  "XAccelPropertyDescriptions": "Returns the acceleration in the X-dimension in SI units (m/s^2). The sensor must be enabled to return meaningful values.",
  "XAngularVelocityProperties": "XAngularVelocity",
  "XAngularVelocityPropertyDescriptions": "The angular velocity around the X axis, in degrees per second.",
  "XMLTextDecodeMethodDescriptions": "Decodes the given XML string to produce a list structure. See the App Inventor documentation on \"Other topics, notes, and details\" for information.",
  "XMLTextDecodeMethods": "XMLTextDecode",
  "XProperties": "X",
  "XPropertyDescriptions": "The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right.",
  "XmlTextParams": "XmlText",
  "YAccelProperties": "YAccel",
  "YAccelPropertyDescriptions": "Returns the acceleration in the Y-dimension in SI units (m/s^2). The sensor must be enabled to return meaningful values.",
  "YAngularVelocityProperties": "YAngularVelocity",
  "YAngularVelocityPropertyDescriptions": "The angular velocity around the Y axis, in degrees per second.",
  "YProperties": "Y",
  "YPropertyDescriptions": "The vertical coordinate of the top of the sprite, increasing as the sprite moves down.",
  "YandexTranslateHelpStringComponentPallette": "Use this component to translate words and sentences between different languages. This component needs Internet access, as it will request translations to the Yandex.Translate service. Specify the source and target language in the form source-target using two letter language codes. So\"en-es\" will translate from English to Spanish while \"es-ru\" will translate from Spanish to Russian. If you leave out the source language, the service will attempt to detect the source language. So providing just \"es\" will attempt to detect the source language and translate it to Spanish.<p /> This component is powered by the Yandex translation service. See http://api.yandex.com/translate/ for more information, including the list of available languages and the meanings of the language codes and status codes. <p />Note: Translation happens asynchronously in the background. When the translation is complete, the \"GotTranslation\" event is triggered.",
  "YearMethodDescriptions": "The year",
  "YearMethods": "Year",
  "YearProperties": "Year",
  "YearPropertyDescriptions": "the Year that was last picked using the DatePicker",
  "ZAccelProperties": "ZAccel",
  "ZAccelPropertyDescriptions": "Returns the acceleration in the Z-dimension in SI units (m/s^2). The sensor must be enabled to return meaningful values.",
  "ZAngularVelocityProperties": "ZAngularVelocity",
  "ZAngularVelocityPropertyDescriptions": "The angular velocity around the Z axis, in degrees per second.",
  "ZProperties": "Z",
  "ZPropertyDescriptions": "Sets the layer of the sprite, indicating whether it will appear in front of or behind other sprites.",
  "ZoomChangeEventDescriptions": "User has changed the zoom level of the map.",
  "ZoomChangeEvents": "ZoomChange",
  "ZoomLevelProperties": "ZoomLevel",
  "ZoomLevelPropertyDescriptions": "<p>Set the zoom level of the map.</p> <p>Valid values of ZoomLevel are dependent on the tile provider and the latitude and longitude of the map. For example, zoom levels are more constrained over oceans than dense city centers to conserve space for storing tiles, so valid values may be 1-7 over ocean and 1-18 over cities. Tile providers may send warning or error tiles if the zoom level is too great for the server to support.</p>",
  "aboutMenuItem": "About",
  "accelerometerSensorComponentPallette": "AccelerometerSensor",
  "accountDisabledMessage": "Your Account is Disabled",
  "activityStarterComponentPallette": "ActivityStarter",
  "addButton": "Upload File ...",
  "addFormButton": "Add Screen ...",
  "addFormError": "Server error: could not add form. Please try again later!",
  "addScreenButton": "Add",
  "addressParams": "address",
  "adminTabName": "Admin",
  "aiaMediaAsset": "To use this file, click Projects > Import project (.aia) from my computer ...",
  "aiaMediaAssetHelp": "http://appinventor.mit.edu/explore/ai2/share.html",
  "aiaMediaAssetTitle": "Error: Cannot upload .aia file as media asset",
  "altitudeParams": "altitude",
  "angleParams": "angle",
  "animTypeParams": "animType",
  "anyComponentLabel": "Any component",
  "apkInstalledToPhone": "The APK file will be installed in the phone.",
  "apkSavedToComputer": "The APK file will be saved in the download folder.",
  "argumentsParams": "arguments",
  "assetListBoxCaption": "Media",
  "automaticCaption": "Automatic",
  "azimuthParams": "azimuth",
  "backButton": "Back",
  "badAlignmentPropertyEditorForArrangement": "System error: bad alignment property editor for horizontal or vertical arrangement.",
  "badValueForHorizontalAlignment": "System error: Bad value - {0} - for Horizontal Alignment.",
  "badValueForVerticalAlignment": "System error: Bad value - {0} - for Vertical Alignment.",
  "ballComponentPallette": "Ball",
  "barcodeScannerComponentPallette": "BarcodeScanner",
  "barcodeTitle": "Barcode link for {0}",
  "barcodeWarning": "Note: this barcode is only valid for 2 hours. See {0} the FAQ {1} for info on how to share your app with others.",
  "bashWarningDialogButtonContinue": "Continue with Multiple Sessions",
  "bashWarningDialogButtonNo": "Do not use multiple Sessions",
  "bashWarningDialogMessage": "<p><font color=red>WARNING:</font> A second App Inventor session has been opened for this account. You may choose to continue with both sessions, but working with App Inventor from more than one session simultaneously can cause blocks to be lost in ways that cannot be recovered from the App Inventor server.</p><p>We recommend that people not open multiple sessions on the same account. But if you do need to work in this way, then you should regularly export your project to your local computer, so you will have a backup copy independent of the App Inventor server. Use \"Export\" from the Projects menu to export the project.</p>",
  "bashWarningDialogText": "Do you want to continue with multiple sessions?",
  "blackColor": "Black",
  "blackTitleTheme": "Black Title Text",
  "blockSelectorBoxCaption": "Blocks",
  "blocksEditorIsOpenButton": "Blocks Editor is open",
  "blocksEditorTabName": "{0} blocks",
  "blocksLoadFailure": "The blocks for screen {0} did not load properly. You will not be able to edit using the blocks editor until the problem is corrected.",
  "blocksNotSaved": "The blocks area did not load properly. Changes to the blocks for screen {0} will not be saved.",
  "blocksToolkitTitle": "Blocks Toolkit",
  "blocksTruncatedDialogButtonHTML": "Please wait %1 seconds...",
  "blocksTruncatedDialogButtonNoSave": "Restore the previous version.",
  "blocksTruncatedDialogButtonSave": "Save the empty screen now.",
  "blocksTruncatedDialogMessage": "<p>It appears that <b>%1</b> has had all blocks removed.</p><p><ul><li>You can save the empty screen, and then all those blocks will be permanently gone from the project.</li><li>Alternatively, you can restore the previously saved version of the project.</li></ul></p>",
  "blocksTruncatedDialogText": "Blocks Workspace is Empty",
  "blueColor": "Blue",
  "bluetoothClientComponentPallette": "BluetoothClient",
  "bluetoothServerComponentPallette": "BluetoothServer",
  "bottomParams": "bottom",
  "buildError": "Server error: could not build target. Please try again later!",
  "buildFailedError": "Build failed!",
  "buildRequestedMessage": "Build of {0} requested at {1}.",
  "buildServerBusyError": "The build server is currently busy. Please try again in a few minutes.",
  "buildServerDifferentVersion": "The build server is not compatible with this version of App Inventor.",
  "buildTabName": "Build",
  "buildingApk": "Building APK",
  "builtinBlocksLabel": "Built-in",
  "builtinColorsLabel": "Colors",
  "builtinControlLabel": "Control",
  "builtinListsLabel": "Lists",
  "builtinLogicLabel": "Logic",
  "builtinMathLabel": "Math",
  "builtinProceduresLabel": "Procedures",
  "builtinTextLabel": "Text",
  "builtinVariablesLabel": "Variables",
  "button1TextParams": "button1Text",
  "button2TextParams": "button2Text",
  "buttonComponentPallette": "Button",
  "buttonEditProfile": "Edit Profile",
  "buttonSendEmail": "Send Email",
  "buttonTextParams": "buttonText",
  "buttonUpdateProfile": "Update Profile",
  "camcorderComponentPallette": "Camcorder",
  "cameraComponentPallette": "Camera",
  "cancelBlocksEditorButton": "Opening the Blocks Editor... (click to cancel)",
  "cancelButton": "Cancel",
  "cancelScreenButton": "Do Not Add",
  "cancelableParams": "cancelable",
  "canvasComponentPallette": "Canvas",
  "centerTextAlignment": "center",
  "centerXParams": "centerX",
  "centerYParams": "centerY",
  "centroidParams": "centroid",
  "centroidsParams": "centroids",
  "checkBoxComponentPallette": "CheckBox",
  "checkpointButton": "Checkpoint ...",
  "checkpointMenuItem": "Checkpoint",
  "checkpointNameLabel": "Checkpoint name:",
  "checkpointTitle": "Checkpoint - {0}",
  "choiceParams": "choice",
  "chooseProject": "Please choose a project to open or create a new project.",
  "circleComponentPallette": "Circle",
  "classicTheme": "Classic",
  "clearButton": "Clear",
  "clipParams": "clip",
  "clockComponentPallette": "Clock",
  "closeFilePreview": "Close Preview",
  "cloudDBComponentPallette": "CloudDB",
  "cmMinimize": "Shrink",
  "cmResize": "Resize...",
  "cmRestore": "Expand",
  "colorCodeParams": "colorCode",
  "colorNameParams": "colorName",
  "colorParams": "color",
  "columnsParams": "columns",
  "commandParams": "command",
  "companionInformation": "Companion Information",
  "companionUpdate": "Update the Companion",
  "companionUpdateMustHaveProject": "You must have a project open to update the Companion",
  "compilingPart1": "Compiling part 1",
  "compilingPart2": "Compiling part 2 (please wait)",
  "componentDatabaseCorrupt": "The component database in the project \"{0}\" is corrupt.",
  "componentImportError": "Import Extension Failed!",
  "componentImportFromComputer": "From my computer",
  "componentImportFromURL": "URL",
  "componentImportUnknownURLError": "Extension Import failed due to unknown URL",
  "componentImportWizardCaption": "Import an extension into project",
  "componentNameLabel": "Extension name",
  "componentParams": "component",
  "componentRenameWizardCaption": "Rename extension",
  "componentUpgradedAlert": "Extension Upgraded : ",
  "componentUploadWizardCaption": "Upload Component...",
  "conditionsParams": "conditions",
  "confirmDeleteKeystore": "Do you really want to delete your keystore file?If you agree, your old keystore file will be completely removed from the App Inventor server. A new, but different, keystore file will be created automatically the next time you package a project for the phone.If you have published applications to the Google Play Store using the keystore you are about to delete, you will lose the ability to update your applications.Any projects that you package in the future will be signed using your new keystore file. Changing the keystore affects the ability to reinstall previously installed apps. If you are not sure that you want to do this, please read the documentation about keystores by clicking above on \"Help\", then \"Troubleshooting\", and then \"Keystores and Signing of Applications\"There is no undo for deleting your keystore file.",
  "confirmDeleteManyProjects": "Are you really sure you want to delete these projects: {0}?",
  "confirmDeleteManyProjectsWithGalleryOn": "Are you really sure you want to delete these projects: {0}? Note that if any of the projects have been published, the published version in the gallery will be removed as well.",
  "confirmDeleteSingleProject": "Are you really sure you want to delete this project: {0}",
  "confirmDeleteSinglePublishedProject": "Are you really sure you want to delete this project: {0}? Note that the published copy of this project will be removed from the gallery as well.",
  "confirmOverwrite": "Request to save {1}A file named {0} already exists in this project.Do you want to remove that old file?This will also remove any other files whose names conflict with {1}.",
  "confirmOverwriteKeystore": "Do you want to overwrite your keystore file?If you agree, your old keystore file will be completely removed from the App Inventor server.If you have published applications to the Google Play Store using the keystore you are about to overwrite, you will lose the ability to update your applications.Any projects that you package in the future will be signed using your new keystore file. Changing the keystore affects the ability to reinstall previously installed apps. If you are not sure that you want to do this, please read the documentation about keystores by clicking above on \"Help\", then \"Troubleshooting\", and then \"Keystores and Signing of Applications\"There is no undo for overwriting your keystore file.",
  "connectButton": "Connect",
  "connectTabName": "Connect",
  "connectivityComponentPallette": "Connectivity",
  "contactPickerComponentPallette": "ContactPicker",
  "contentsParams": "contents",
  "copyProjectError": "Server error: could not copy project. Please try again later!",
  "copyingRpcMessage": "Copying ...",
  "corruptionDialogMessage": "<p><b>We detected errors while reading in your project</b></p><p>To protect your project from damage, we have ended this session. You may close this window.</p>",
  "corruptionDialogText": "Project Read Error",
  "countParams": "count",
  "createNoProjectsDialogMessage1": "You do not have any projects in App Inventor 2. To learn how to use App Inventor, click the \"Guide\" link at the top of the window; or to start your first project, click the \"Start New Project\" button at the upper left of the window.",
  "createNoProjectsDialogText": "Welcome to App Inventor 2!",
  "createNoprojectsDialogMessage2": "Happy Inventing!",
  "createProjectError": "Server error: could not create project. Please try again later!",
  "createWelcomeDialogButton": "Continue",
  "createWelcomeDialogText": "Welcome to App Inventor!",
  "currentXParams": "currentX",
  "currentYParams": "currentY",
  "customEllipsis": "Custom...",
  "cyanColor": "Cyan",
  "darkGrayColor": "Dark Gray",
  "darkTheme": "Dark",
  "dateBuilt": "Date Built:",
  "datePickerComponentPallette": "DatePicker",
  "dayParams": "day",
  "daysParams": "days",
  "defaultButtonShape": "default",
  "defaultCheckpointProjectName": "{0}_checkpoint{1}",
  "defaultColor": "Default",
  "defaultFontTypeface": "default",
  "defaultRpcMessage": "Loading ...",
  "defaultSaveAsProjectName": "{0}_copy",
  "defaultScreenAnimation": "Default",
  "defaultText": "Default",
  "defaultTheme": "Device Default",
  "deleteButton": "Delete",
  "deleteComponentButton": "Delete component",
  "deleteFileCommand": "Delete...",
  "deleteFileError": "Server error: could not delete the file. Please try again later!",
  "deleteKeystoreError": "Server error: could not delete your keystore file.",
  "deleteKeystoreMenuItem": "Delete keystore",
  "deleteProjectButton": "Delete Project",
  "deleteProjectError": "Server error: could not delete project. Please try again later!",
  "deleteProjectMenuItem": "Delete project",
  "deletingRpcMessage": "Deleting ...",
  "descriptionParams": "description",
  "destinationParams": "destination",
  "determiningPermissions": "Determining permissions",
  "disableOpenDyslexic": "Disable OpenDyslexic",
  "dismissButton": "Dismiss",
  "distanceParams": "distance",
  "doFaultMethodDescriptions": "Causes an Exception, used to debug exception processing.",
  "doFaultMethods": "doFault",
  "doNotShow": "Do Not Show Again",
  "done": "Done",
  "downloadAllAlert": "It may take a little while for your projects to be downloaded. Please be patient...",
  "downloadFileCommand": "Download to my computer",
  "downloadKeystoreError": "Server error: could not download your keystore file.",
  "downloadKeystoreMenuItem": "Export keystore",
  "downloadToComputerMenuItem": "App ( save .apk to my computer )",
  "downloadToComputerMenuItem2": "App for Google Play ( save .apk to my computer )",
  "downloadUserSourceDialogTitle": "Download User Source",
  "downloadUserSourceMenuItem": "Download User Source",
  "downloadingRpcMessage": "Downloading to phone ...",
  "draggedAnySpriteParams": "draggedAnySprite",
  "draggedSpriteParams": "draggedSprite",
  "drawingAndAnimationComponentPallette": "Drawing and Animation",
  "duplicateComponentNameError": "Duplicate component name!",
  "duplicateFormNameError": "Duplicate Screen name!",
  "duplicateProjectNameError": "{0} already exists. You cannot create another project with the same name.",
  "durationMsParams": "durationMs",
  "durationParams": "duration",
  "edgeParams": "edge",
  "emailAddressParams": "emailAddress",
  "emailInboxTitle": "Emails",
  "emailPickerComponentPallette": "EmailPicker",
  "emailSendTitle": "Send an Email",
  "emailSentFrom": "Sent From: ",
  "emailSentTo": "Sent To: ",
  "emulatorMenuItem": "Emulator",
  "enableOpenDyslexic": "Enable OpenDyslexic",
  "encodingParams": "encoding",
  "endParams": "end",
  "errorEmailFrequency": "Invalid Email Frequency: Must be an numeric and greater than 0",
  "errorGeneratingYail": "Unable to generate code for {0}.",
  "errorMessageParams": "errorMessage",
  "errorNumberParams": "errorNumber",
  "ev3ColorSensorComponentPallette": "Ev3ColorSensor",
  "ev3CommandsComponentPallette": "Ev3Commands",
  "ev3GyroSensorComponentPallette": "Ev3GyroSensor",
  "ev3MotorsComponentPallette": "Ev3Motors",
  "ev3SoundComponentPallette": "Ev3Sound",
  "ev3TouchSensorComponentPallette": "Ev3TouchSensor",
  "ev3UIComponentPallette": "Ev3UI",
  "ev3UltrasonicSensorComponentPallette": "Ev3UltrasonicSensor",
  "expectedLatLongPair": "The value supplied for {0} was not a valid latitude, longitude pair.",
  "experimentalComponentPallette": "Experimental",
  "exportAllProjectsMenuItem": "Export all projects",
  "exportProjectMenuItem": "Export selected project (.aia) to my computer",
  "extensionComponentPallette": "Extension",
  "extensionDescriptorCorrupt": "The extension description of \"{0}\" in the project \"{1}\" is corrupt.",
  "extensionsMenuItem": "Extensions",
  "externalComponentVersion": "Extension Version:",
  "extraKeyValueWarning": "ExtraKey and ExtraValue are deprecated and will not be supported. Please use the new Extras property in Blocks.# Description: Text for screen animation choice 'Fade '",
  "fadeScreenAnimation": "Fade",
  "featureCollectionComponentPallette": "FeatureCollection",
  "featureParams": "feature",
  "featuresParams": "features",
  "feedbackLink": "Report an Issue",
  "feedbackMenuItem": "Report an Issue",
  "feedbackTabName": "Report an Issue",
  "fileComponentPallette": "File",
  "fileNameParams": "fileName",
  "fileParams": "file",
  "filePlaybackError": "Unfortunately, your browser does not support playback of this file.",
  "filePreviewError": "Unfortunately, a preview for this file is unavailable.",
  "fileTooLargeError": "Error: could not upload file because it is too large",
  "fileUploadError": "Server error: could not upload file. Please try again later!",
  "fileUploadWizardCaption": "Upload File ...",
  "fileUploadingMessage": "Uploading {0} to the App Inventor server",
  "filenameBadSize": "File names must be between 1 and 100 characters.",
  "filenameBadSizeTitle": "Error: Bad Filename Size",
  "fillParams": "fill",
  "fillParentCaption": "Fill parent",
  "finalDialogMessage": "<p><b>Your Session is now ended, you may close this window</b></p>",
  "finalDialogText": "Your Session is Finished",
  "firebaseDBComponentPallette": "FirebaseDB",
  "firebaseExperimentalWarning": "FirebaseDB is an experimental feature which may change in the future or break. Packaged Apps built with this component may not function into the indefinite future.",
  "firstCharProjectNameError": "Project names must begin with a letter",
  "fixedSizing": "Fixed",
  "flungSpriteParams": "flungSprite",
  "followers2Params": "followers2",
  "forInternalUseOnlyComponentPallette": "For internal use only",
  "formComponentPallette": "Form",
  "formCountErrorLabel": "WARNING: The number of screens in this app might exceed the limits of App Inventor. Click <a target=\"_blank\" href=\"/reference/other/manyscreens.html\">here</a> for advice about creating apps with many screens. <p>Do you really want to add another screen?</p>",
  "formNameLabel": "Screen name:",
  "forumsMenuItem": "Forums",
  "frequencyHzParams": "frequencyHz",
  "frequencyParams": "frequency",
  "fromParams": "from",
  "fromUrlButton": "From URL...",
  "functionNameParams": "functionName",
  "fusiontablesControlComponentPallette": "FusiontablesControl",
  "galleryAlreadyReportedPrompt": "You already reported this app. An administrator will process your report shortly.",
  "galleryAppBoxCaption": "Gallery App",
  "galleryAppChangedPrefix": "Changed on ",
  "galleryAppCreatedPrefix": "Created on ",
  "galleryAppLikeError": "Server error: could not retrieve num of like",
  "galleryAppOpening": "Opening ...",
  "galleryAppPublishing": "Publishing ...",
  "galleryAppRemoving": "Removing ...",
  "galleryAppUpdating": "Updating ...",
  "galleryAppsAlreadyLike": "Unlike",
  "galleryAppsByAuthorSidebar": "Apps developed by",
  "galleryAppsLike": "Like",
  "galleryAppsRemixesSidebar": "Remixes of ",
  "galleryByAuthorText": "By Author",
  "galleryByDeveloperPrefixedText": "By ",
  "galleryCancelText": "Cancel",
  "galleryCcLicenseRef": "By submitting an app in the gallery, you are publishing it under a <a href=\"https://creativecommons.org/licenses/by/4.0/\" target=\"_blank\">Creative Commons Attribution License</a>, and affirming that you have the authority to do so.",
  "galleryChangedDateLabel": "Changed Date: ",
  "galleryCommentError": "Server error: could not retrieve comments",
  "galleryCopyButton": "Copy",
  "galleryCreatedDateLabel": "Created Date: ",
  "galleryCreditHint": "Are you remixing code from other apps? Credit them here.",
  "galleryCreditLabel": "Credits: ",
  "galleryDeleteError": "Server error: gallery deletion error",
  "galleryDescriptionHint": "Please write the description of the app here.",
  "galleryDeveloperAppError": "Server error: could not retrieve developer gallery apps from gallery",
  "galleryDownloadedAppsError": "Server error: could not get most downloaded apps from gallery",
  "galleryEditText": "Edit",
  "galleryEmptyText": "",
  "galleryError": "Server error: gallery cannot be accessed",
  "galleryFeaturedAppError": "Server error: could not retrieve featured apps from gallery",
  "galleryFeaturedText": "Feature",
  "galleryGalleryIdAction": "/?galleryId=",
  "galleryIdNotExist": "There is no Gallery App with the given id.",
  "galleryLikedAppsError": "Server error: could not get most liked apps from gallery",
  "galleryListBoxCaption": "Gallery",
  "galleryMoreApps": "More Apps",
  "galleryMoreInfoHint": "If this app has a tutorial or video, please enter the URL here.",
  "galleryMoreInfoLabel": "Tutorial / Video: ",
  "galleryMoreReports": "More Reports",
  "galleryNoExtensionsPlease": "Apps with extensions cannot be uploaded to the Gallery",
  "galleryNoScreenShotMessage": "Please submit a screenshot or some other representative image before publishing your app",
  "galleryNotEnoughDescriptionMessage": "please provide a longer description before publishing your app",
  "galleryOpenText": "Open the App",
  "galleryPublishText": "Publish",
  "galleryRecentAppsError": "Server error: could not get recent apps from gallery",
  "galleryRemixChildren": "Click to view the remixes of this app!",
  "galleryRemixedFrom": "Remixed from: ",
  "galleryRemoveConfirmText": "Are you really sure you want to remove this app from gallery?",
  "galleryRemoveText": "Remove",
  "galleryReportButton": "Submit report",
  "galleryReportCompletionPrompt": "You reported this app. An administrator will process your report shortly.",
  "galleryReportPrompt": "Please explain why you feel this app is disrespectful or inappropriate, or otherwise breaks the <a href=\"http://google.com\">App Inventor Gallery Community Guidelines.</a> ",
  "gallerySearch": "Search",
  "gallerySearchError": "Server error: could not complete a search of gallery",
  "gallerySearchForAppsButton": "Search for Apps",
  "gallerySearchResultsInfix": "\" returned ",
  "gallerySearchResultsPrefix": "search for \"",
  "gallerySearchResultsSuffix": " results",
  "gallerySetProjectIdError": "Server error: gallery error when setting project gallery id",
  "gallerySettingsError": "Server error: gallery settings could not be accessed",
  "gallerySharePrompt": "Copy and share link: ",
  "gallerySingleSpaceText": " ",
  "galleryTabName": "Gallery",
  "galleryTutorialText": "Tutorial",
  "galleryUnfeaturedText": "Unfeature",
  "galleryUntutorialText": "Untutorial",
  "galleryUpdateText": "Update",
  "galleryVisitGalleryAppLinkLabel": "",
  "gameClientComponentPallette": "GameClient",
  "generateYailMenuItem": "Generate YAIL",
  "generatingApplicationInformation": "Generating application information",
  "getMotdFailed": "Failed to contact server to get the MOTD.",
  "getStartedMenuItem": "Get Started",
  "gitBuildId": "Built: {0}  Version: {1}",
  "grayColor": "Gray",
  "greenColor": "Green",
  "guideTabName": "Guide",
  "gyroscopeSensorComponentPallette": "GyroscopeSensor",
  "hardResetConnectionsMenuItem": "Hard Reset",
  "hdrClose": "Close",
  "hdrMinimize": "Shrink",
  "hdrRestore": "Expand",
  "hdrSettings": "Settings",
  "headingParams": "heading",
  "heightParams": "height",
  "heightPropertyCaption": "Height",
  "helpTabName": "Help",
  "hideLink": "hide",
  "hideWarnings": "Hide Warnings",
  "hintPropertyValue": "Hint for {0}",
  "horizontalAlignmentChoiceCenter": "Center",
  "horizontalAlignmentChoiceLeft": "Left",
  "horizontalAlignmentChoiceRight": "Right",
  "horizontalArrangementComponentPallette": "HorizontalArrangement",
  "horizontalScrollArrangementComponentPallette": "HorizontalScrollArrangement",
  "hourParams": "hour",
  "hoursParams": "hours",
  "htmlTextParams": "htmlText",
  "iceServersParams": "iceServers",
  "imageComponentPallette": "Image",
  "imageParams": "image",
  "imagePathParams": "imagePath",
  "imagePickerComponentPallette": "ImagePicker",
  "imageSpriteComponentPallette": "ImageSprite",
  "importExtensionMenuItem": "Import extension",
  "importProjectMenuItem": "Import project (.aia) from my computer ...",
  "importTemplateButton": "Import project (.aia) from a repository ...",
  "inappropriateAppContentEmail": "Your app \"{0}\" has inappropriate content. Please review the guidelines at ...and modify your app accordingly. ",
  "inappropriateAppContentRemoveEmail": "Your app \"{0}\" has been removed from the gallery due to inappropriate content. Please review the guidelines at http://ai2.appinventor.mit.edu/about/termsofservice.html. If you feel this action has been taken in error, you may reply directly to this e-mail for discussion. # Description: Label of the Inappropriate App Content Remove on reportlist",
  "inappropriateAppContentRemoveTitle": "Inappropriate App Content: Remove",
  "inappropriateAppContentTitle": "Inappropriate App Content",
  "inappropriateUserProfileContentEmail": "Your profile contains inappropriate content. Please modify your profile.# Description: Label of the Inappropriate User Profile Content on reportlist",
  "inappropriateUserProfileContentTitle": "Inappropriate User Profile Content",
  "inputNewUrlCaption": "Input a Url...",
  "installURLMethodDescriptions": "Downloads the URL and installs it as an Android Package via the installed browser",
  "installURLMethods": "installURL",
  "instanceIdParams": "instanceId",
  "instantParams": "instant",
  "internalError": "An internal error has occurred.",
  "internalErrorClickOkDebuggingView": "An internal error has occurred. Click \"ok\" for more information.",
  "internalErrorReportBug": "An internal error has occurred. Report a bug?",
  "internalErrorSeeDebuggingView": "An internal error has occurred. Go look in the Debugging view.",
  "internalUseComponentPallette": "For internal use only",
  "invalidCharProjectNameError": "Invalid character. Project names can only contain letters, numbers, and underscores",
  "invalidExtensionInProject": "The project \"{0}\" contains an invalid extension. App Inventor will attempt to continue.",
  "invalidSessionDialogButtonContinue": "Continue with Both Sessions",
  "invalidSessionDialogButtonCurrent": "Make this the current session",
  "invalidSessionDialogButtonEnd": "End This Session",
  "invalidSessionDialogMessage": "<p><font color=red>Warning:</font> This session is out of date.</p><p>This App Inventor account has been opened from another location. Using a single account from more than one location at the same time can damage your projects.</p><p>Choose one of the buttons below to:<ul><li>End this session here.</li><li>Make this the current session and make the other sessions out of date.</li><li>Continue with both sessions.</li></ul></p>",
  "invalidSessionDialogText": "This Session Is Out of Date",
  "invalidUserIdOrProjectIdError": "Please specify both a user email address or id and a project name or id for the project to be downloaded. Ids are numeric and may come from the system logs or from browsing the Datastore. If you use an email address, it must match exactly the stored email address in the Datastore. Similarly, project names must match exactly. Both are case sensitive.",
  "isBuildingButton": "Packaging ...",
  "isConnectedMethodDescriptions": "Returns TRUE if the phone is on Wifi, FALSE otherwise",
  "isConnectedMethods": "isConnected",
  "isDirectMethodDescriptions": "Returns true if we are running in the emulator or USB Connection",
  "isDirectMethods": "isDirect",
  "itemToAddParams": "itemToAdd",
  "jsonTextParams": "jsonText",
  "keystoreUploadError": "Server error: could not upload keystore. Please try again later!",
  "keystoreUploadWizardCaption": "Upload Keystore...",
  "labelCancel": "Cancel",
  "labelChooseTemplate": "Choose Template",
  "labelComponentPallette": "Label",
  "labelConfirm": "Confirm",
  "labelDeactivateApp": "Deactivate App",
  "labelDeactivateAppAndSendEmail": "Deactivate App & Send Email",
  "labelEditYourProfile": "Edit your profile",
  "labelEmailDescription": "App Inventor will send you a notification when the apps you have posted are liked or downloaded. Below, you can enable/disable this feature and you can specify how often you want to be notified",
  "labelEmailFrequencyPrefix": "Get email for every ",
  "labelEmailFrequencySuffix": " new Likes + Downloads",
  "labelMoreInfoLink": "More info link",
  "labelReactivateApp": "Reactivate App",
  "labelSeeAllActions": "Previous Actions",
  "labelYourDisplayName": "Your display name",
  "labelmarkAsResolved": "Mark As Resolved",
  "labelmarkAsUnresolved": "Mark As Unresolved",
  "landscapeScreenOrientation": "Landscape",
  "languageToTranslateToParams": "languageToTranslateTo",
  "latitudeParams": "latitude",
  "layoutComponentPallette": "Layout",
  "leftParams": "left",
  "leftTextAlignment": "left",
  "legoMindstormsComponentPallette": "LEGO® MINDSTORMS®",
  "libraryMenuItem": "Library",
  "lightGrayColor": "Light Gray",
  "lineStringComponentPallette": "LineString",
  "listParams": "list",
  "listPickerComponentPallette": "ListPicker",
  "listViewComponentPallette": "ListView",
  "loadError": "Server error: could not load file. Please try again later!",
  "loadingAppIndicatorText": "Loading App ...",
  "loadingAsset": "Downloading {0} from the App Inventor server...",
  "locationNameParams": "locationName",
  "locationSensorComponentPallette": "LocationSensor",
  "longToastLength": "Long",
  "longitudeParams": "longitude",
  "magentaColor": "Magenta",
  "mailboxParams": "mailbox",
  "makePublicParams": "makePublic",
  "malformedComponentNameError": "Component names can contain only letters, numbers, and underscores and must start with a letter",
  "malformedFilename": "File names can contain only unaccented letters, numbers, and the characters \"-\", \"_\", \".\", \"!\", \"~\", \"*\", \"(\", and \")\"",
  "malformedFilenameTitle": "Error: Malformed Filename",
  "malformedFormNameError": "Screen names can contain only letters, numbers, and underscores and must start with a letter",
  "malformedInputError": "Malformed input!",
  "malformedProjectNameError": "Project names must start with a letter and can contain only letters, numbers, and underscores",
  "mapCenterWrongNumberArgumentsException": "Expected 2 values for CenterFromString but got {0}",
  "mapComponentPallette": "Map",
  "mapFeatureParams": "mapFeature",
  "mapLockMovementTooltip": "Lock map movement",
  "mapResetBoundingBoxTooltip": "Reset bounding box",
  "mapScaleUnitsImperial": "Imperial",
  "mapScaleUnitsMetric": "Metric",
  "mapSetInitialMapTooltip": "Set initial map to current view",
  "mapTypeAerial": "Aerial",
  "mapTypeRoads": "Roads",
  "mapTypeTerrain": "Terrain",
  "mapUnlockMovementTooltip": "Unlock map component",
  "mapZoomIn": "Zoom In",
  "mapZoomLevelOutOfBoundsException": "ZoomLevel must be between 1 and 18",
  "mapZoomOut": "Zoom Out",
  "mapsComponentPallette": "Maps",
  "markerComponentPallette": "Marker",
  "mediaComponentPallette": "Media",
  "mediaStoreComponentPallette": "MediaStore",
  "mediafileParams": "mediafileParams",
  "mentionsParams": "mentions",
  "messageParams": "message",
  "messageTextParams": "messageText",
  "messagesOutputBoxCaption": "Messages",
  "messagesParams": "messages",
  "millisParams": "millis",
  "millisecondsParams": "milliseconds",
  "millisecsParams": "millisecs",
  "minuteParams": "minute",
  "minutesParams": "minutes",
  "modeParams": "mode",
  "moderateAccelerometerSensitivity": "moderate",
  "moderationActionDeactivateThisAppWithEmail": "deativates this app with email: ",
  "moderationActionMarkThisReportAsResolved": "marks this report as resolved",
  "moderationActionMarkThisReportAsUnresolved": "marks this report as unresolved",
  "moderationActionReactivateThisApp": "reactivates this app",
  "moderationActionSendAnEmail": "sends an email: ",
  "moderationAppAuthorHeader": "App Author",
  "moderationAppDeactivatedTitle": "App Inventor Gallery: App Deactivated",
  "moderationAppHeader": "App",
  "moderationAppReactivateBody": "Your app \"{0}\" has been reactivated.",
  "moderationAppReactivatedTitle": "App Inventor Gallery: App Activated",
  "moderationDotDotDot": "...",
  "moderationErrorFailToSendEmail": "Fail to send out the email, please try again later",
  "moderationPageBoxCaption": "Reports",
  "moderationReportDateCreatedHeader": "Reported On",
  "moderationReportTextHeader": "Report",
  "moderationReporterHeader": "Reporter",
  "moderationSendEmailTitle": "An Email from App Inventor Gallery",
  "moderationShowResolvedReports": "Show resolved reports",
  "monospaceFontTypeface": "monospace",
  "monthParams": "month",
  "monthsParams": "months",
  "moreActionsButton": "More Actions",
  "moreInformation": "More information",
  "motdBoxCaption": "Welcome to App Inventor!",
  "motorPortLetterParams": "motorPortLetter",
  "msParams": "ms",
  "myProjectsTabName": "My Projects",
  "nameParams": "name",
  "nearFieldComponentPallette": "NearField",
  "newFormTitle": "New Screen",
  "newNameLabel": "New name:",
  "newProjectMenuItem": "Start new project",
  "newUrlLabel": "Templates Url: ",
  "newYoungAndroidProjectWizardCaption": "Create new App Inventor project",
  "newerVersionComponentException": "Unable to load project with {0} version {1} (maximum known version is {2}).",
  "newerVersionProject": "This project was saved with a newer version of the App Inventor system. We will attempt to load the project, but there may be compatibility issues.",
  "nextButton": "Next",
  "noAssetSelected": "You must select an asset!",
  "noComponentFound": "Unable to find component \"{0}\" while loading project \"{1}\".",
  "noComponentSelected": "You must select a component!",
  "noFileSelected": "Please select a file to upload.",
  "noFileSelectedTitle": "Error: No File Selected",
  "noKeystoreToDownload": "There is no keystore file to download.",
  "noParams": "no",
  "noProjectSelectedForDelete": "Please select a project to delete",
  "noResultsFound": "No Results Found",
  "noUpgradeStrategyException": "No upgrade strategy exists for {0} from version {1} to {2}.",
  "noUrlError": "Please enter a url",
  "nonVisibleComponentsHeader": "Non-visible components",
  "noneCaption": "None",
  "noneColor": "None",
  "noneScreenAnimation": "None",
  "nonnumericInputError": "The value must be an integer greater than or equal to 0",
  "nonvalidPercentValue": "Percentage input values should be between 1 and 100",
  "noprojectDialogTitle": "No Project Chosen",
  "noprojectDuringConnect": "You must first create or select a project before connecting!",
  "notAFloat": "{0} is not a legal number",
  "notAlreadyHandledParams": "notAlreadyHandled",
  "notAnInteger": "{0} is not a legal integer",
  "notComponentArchiveError": "The selected file is not a component file!Component files are aix files.",
  "notKeystoreError": "The selected file is not a keystore!",
  "notProjectArchiveError": "The selected project is not a project source file!Project source files are aia files.",
  "noticeParams": "notice",
  "notifierComponentPallette": "Notifier",
  "numberOfBytesParams": "numberOfBytes",
  "numberParams": "number",
  "nxtColorSensorComponentPallette": "NxtColorSensor",
  "nxtDirectCommandsComponentPallette": "NxtDirectCommands",
  "nxtDriveComponentPallette": "NxtDrive",
  "nxtLightSensorComponentPallette": "NxtLightSensor",
  "nxtSoundSensorComponentPallette": "NxtSoundSensor",
  "nxtTouchSensorComponentPallette": "NxtTouchSensor",
  "nxtUltrasonicSensorComponentPallette": "NxtUltrasonicSensor",
  "odeLogBoxCaption": "Developer Messages",
  "okButton": "OK",
  "oldNameLabel": "Old name:",
  "openBlocksEditorButton": "Open the Blocks Editor",
  "orangeColor": "Orange",
  "orientationSensorComponentPallette": "OrientationSensor",
  "otherParams": "other",
  "otherScreenNameParams": "otherScreenName",
  "ovalButtonShape": "oval",
  "packagingRpcMessage": "Packaging ...",
  "paletteBoxCaption": "Palette",
  "partialParams": "partial",
  "passwordTextBoxComponentPallette": "PasswordTextBox",
  "pathParams": "path",
  "patternParams": "pattern",
  "pedometerComponentPallette": "Pedometer",
  "percentCaption": "percent",
  "percentSummary": "{0} percent",
  "permissionNameParams": "permissionName",
  "phoneCallComponentPallette": "PhoneCall",
  "phoneNotConnected": "The phone is not connected.",
  "phoneNumberParams": "phoneNumber",
  "phoneNumberPickerComponentPallette": "PhoneNumberPicker",
  "phoneStatusComponentPallette": "PhoneStatus",
  "pinkColor": "Pink",
  "pitchParams": "pitch",
  "pixelsCaption": "pixels",
  "pixelsSummary": "{0} pixels",
  "playerComponentPallette": "Player",
  "playerEmailParams": "playerEmail",
  "playerIdParams": "playerId",
  "pointListParams": "pointList",
  "polygonComponentPallette": "Polygon",
  "portraitScreenOrientation": "Portrait",
  "powerParams": "power",
  "preparingApplicationIcon": "Preparing application icon",
  "preparingFinalPackage": "Preparing final package",
  "prevXParams": "prevX",
  "prevYParams": "prevY",
  "previewFileCommand": "Preview...",
  "previewMonitorSize": "Monitor size",
  "previewPhoneSize": "Phone size",
  "previewTabletSize": "Tablet size",
  "previousCheckpointsLabel": "Previous checkpoints:",
  "privacyLink": "Privacy",
  "privacyTermsLink": "Privacy Policy and Terms of Use",
  "privateProfileLink": "Profile",
  "profilePageBoxCaption": "My Profile",
  "programNameParams": "programName",
  "projectDateCreatedHeader": "Date Created",
  "projectDateModifiedHeader": "Date Modified",
  "projectIdLabel": "Project id or name:",
  "projectInformationRetrievalError": "Server error: could not retrieve project information. Please try again later!",
  "projectListBoxCaption": "My Projects",
  "projectLoadError": "Server error: could not load project. Please try again later!",
  "projectMenuItem": "My projects",
  "projectNameHeader": "Name",
  "projectNameLabel": "Project name:",
  "projectPublishedHeader": "Published",
  "projectUploadError": "Server error: could not upload project. Please try again later!",
  "projectUploadWizardCaption": "Import Project...",
  "projectWasUpgraded": "This project was created with an older version of the App Inventor system and was upgraded.{0}",
  "projectsTabName": "Projects",
  "propertiesBoxCaption": "Properties",
  "providerParams": "provider",
  "proximitySensorComponentPallette": "ProximitySensor",
  "publishToGalleryButton": "Publish to Gallery",
  "quantityParams": "quantity",
  "queryParams": "query",
  "rParams": "r",
  "radiusParams": "radius",
  "readOnlyMode": "You are in Read Only Mode",
  "reallyDeleteComponent": "Deleting this component will delete all blocks associated with it in the Blocks Editor. Are you sure you want to delete?",
  "reallyDeleteFile": "Do you really want to delete this file?  It will be removed from the App Inventor server.  Also, parts of your application may still refer to the deleted file, and you will need to change these.",
  "reallyDeleteForm": "Deleting this screen will completely remove the screen from your project. All components and blocks associated with this screen will be deleted.There is no undo.Are you sure you want to delete {0}?",
  "reallyRemoveComponent": "Removing this component will delete all components and blocks associated with them in the Project. Are you sure you want to delete?",
  "recipientsParams": "recipients",
  "rectButtonShape": "rectangular",
  "rectangleComponentPallette": "Rectangle",
  "redColor": "Red",
  "regulationModeParams": "regulationMode",
  "relativeParams": "relative",
  "reloadWindow": "Reload",
  "remixedYoungAndroidProjectWizardCaption": "Name this App Inventor project",
  "removeFormButton": "Remove Screen",
  "renameButton": "Rename",
  "renameTitle": "Rename Component",
  "rendezvousServerParams": "rendezvousServer",
  "reservedNameError": "Name cannot be any of the following: CsvUtil, Double, Float, Integer, JavaCollection, JavaIterator, KawaEnvironment, Long, Short, SimpleForm, String, Pattern, YailList, YailNumberToString, YailRuntimeError, abstract, continue, for, new, switch, assert, default, goto, package, synchronized, boolean, do, if, private, this, break, double, implements, protected, throw, byte, else, import, public, throws, case, enum, instanceof, return, transient, catch, extends, int, short, try, char, final, interface, static, void, class, finally, long, strictfp, volatile, const, float, native, super, while",
  "resetConnectionsMenuItem": "Reset Connection",
  "responseCodeParams": "responseCode",
  "responseContentParams": "responseContent",
  "responseParams": "response",
  "responseTypeParams": "responseType",
  "responsiveSizing": "Responsive",
  "resultParams": "result",
  "rightParams": "right",
  "rightTextAlignment": "right",
  "rollParams": "roll",
  "roundedButtonShape": "rounded",
  "runStateParams": "runState",
  "rxDataLengthParams": "rxDataLength",
  "sameAsComponentInstanceNameError": "Component names cannot be the same as that of a component instance",
  "sameAsComponentTypeNameError": "Component instance names cannot be the same as a component type",
  "sansSerifFontTypeface": "sans serif",
  "saveAsButton": "Export to File ...",
  "saveAsMenuItem": "Save project as ...",
  "saveAsTitle": "Save As - {0}",
  "saveButton": "Save",
  "saveError": "Server error: could not save file. Please try again later!",
  "saveErrorMultipleFiles": "Server error: could not save one or more files. Please try again later!",
  "saveMenuItem": "Save project",
  "savedProject": "Saved project at {0}",
  "savingRpcMessage": "Saving ...",
  "scaleProportionally": "Scale proportionally",
  "scaleToFit": "Scale to fit",
  "screensButton": "Screens ...",
  "searchComponents": "Search Components...",
  "searchResultsParams": "searchResults",
  "secondParams": "second",
  "secondParamsMethods": "secondParams",
  "secondsParams": "seconds",
  "secureParams": "secure",
  "seeMoreLink": "see more ...",
  "seedParams": "seed",
  "selectionParams": "selection",
  "senderParams": "sender",
  "sendingAssetToCompanion": "Sending {0} to companion...",
  "sensorModeParams": "sensorMode",
  "sensorPortLetterParams": "sensorPortLetter",
  "sensorScreenOrientation": "Sensor",
  "sensorTypeParams": "sensorType",
  "sensorValueParams": "sensorValue",
  "sensorsComponentPallette": "Sensors",
  "serifFontTypeface": "serif",
  "serverUnavailable": "The server is temporarily unavailable. Please try again later!",
  "serviceNameParams": "serviceName",
  "sessionDead": "Either your session has expired, or App Inventor has been upgraded. You will need to \"Reload\" your session to continue. Press the \"Reload\" Button below.",
  "setAssetsLoadedMethodDescriptions": "Declare that we have loaded our initial assets and other assets should come from the sdcard",
  "setAssetsLoadedMethods": "setAssetsLoaded",
  "setHmacSeedReturnCodeMethodDescriptions": "Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server. Note: This code also starts the connection negotiation process if we are using WebRTC. This is a bit of a kludge...",
  "setHmacSeedReturnCodeMethods": "setHmacSeedReturnCode",
  "settingsLoadError": "Server error: could not load settings. Please try again later!",
  "settingsSaveError": "Server error: could not save settings. Please try again later!",
  "settingsTabName": "Settings",
  "sharingComponentPallette": "Sharing",
  "shortToastLength": "Short",
  "showBarcodeMenuItem": "App ( provide QR code for .apk )",
  "showBarcodeMenuItem2": "App for Google Play ( provide QR code for .apk )",
  "showHiddenComponentsCheckbox": "Display hidden components in Viewer",
  "showSplashMenuItem": "Show Splash Screen",
  "showSurveySplashButtonLater": "Take Survey Later",
  "showSurveySplashButtonNever": "Never Take Survey",
  "showSurveySplashButtonNow": "Take Survey Now",
  "showSurveySplashMessage": "<h2>Please fill out a short voluntary survey so that we can learn more about our users and improve MIT App Inventor.</h2>",
  "showWarnings": "Show Warnings",
  "shutdownMethodDescriptions": "Really Exit the Application",
  "shutdownMethods": "shutdown",
  "signOutLink": "Sign out",
  "simpleStepsParams": "simpleSteps",
  "slideHorizontalScreenAnimation": "SlideHorizontal",
  "slideVerticalScreenAnimation": "SlideVertical",
  "sliderComponentPallette": "Slider",
  "socialComponentPallette": "Social",
  "soundComponentPallette": "Sound",
  "soundParams": "sound",
  "soundRecorderComponentPallette": "SoundRecorder",
  "sourceParams": "source",
  "sourceStructureBoxCaption": "Components",
  "speechRecognizerComponentPallette": "SpeechRecognizer",
  "speedParams": "speed",
  "spinnerComponentPallette": "Spinner",
  "startAngleParams": "startAngle",
  "startHTTPDMethodDescriptions": "Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!",
  "startHTTPDMethods": "startHTTPD",
  "startParams": "start",
  "startWebRTCMethodDescriptions": "Start the WebRTC engine",
  "startWebRTCMethods": "startWebRTC",
  "startXParams": "startX",
  "startYParams": "startY",
  "startingConnectionDialog": "0 Starting Up",
  "statusParams": "status",
  "storageComponentPallette": "Storage",
  "strongAccelerometerSensitivity": "strong",
  "studioListBoxCaption": "My Studios",
  "sweepAngleParams": "sweepAngle",
  "switchComponentPallette": "Switch",
  "switchLanguageButton": "Language",
  "switchToBlocksEditorButton": "Blocks",
  "switchToDebugMenuItem": "Switch To Debug Panel",
  "switchToFormEditorButton": "Designer",
  "symbolX": "X",
  "tabNameDebugging": "(Debugging)",
  "tabNameDesign": "Design",
  "tabNameGallery": "Gallery",
  "tabNameModeration": "Moderation",
  "tabNameProjects": "My Projects",
  "tableArrangementComponentPallette": "TableArrangement",
  "tableIdParams": "tableId",
  "tachoCountParams": "tachoCount",
  "tachoCountsParams": "tachoCounts",
  "tachoLimitParams": "tachoLimit",
  "tagFromWebDBParams": "tagFromWebDB",
  "tagParams": "tag",
  "targetParams": "target",
  "targetSdkVersion": "Target Android SDK: {0} ({1})",
  "templateUploadNewUrlCaption": "Add a New Template Library Url",
  "templateUploadWizardCaption": "Create a Project from a Template",
  "termsLink": "Terms",
  "textAnyComponentLabel": "Any ",
  "textBoxComponentPallette": "TextBox",
  "textParams": "text",
  "textPropertyValue": "Text for {0}",
  "textReceivingChoiceAlways": "Always",
  "textReceivingChoiceForeground": "Foreground",
  "textReceivingChoiceOff": "Off",
  "textToSpeechComponentPallette": "TextToSpeech",
  "textToTranslateParams": "textToTranslate",
  "textingComponentPallette": "Texting",
  "thumbPositionParams": "thumbPosition",
  "timePickerComponentPallette": "TimePicker",
  "timelineParams": "timeline",
  "timestampParams": "timestamp",
  "tinyDBComponentPallette": "TinyDB",
  "tinyWebDBComponentPallette": "TinyWebDB",
  "titleParams": "title",
  "titleSeeAllActionsPopup": "Previous Actions on Report",
  "titleYoungAndroid": "MIT App Inventor",
  "toggleTutorialButton": "Toggle Tutorial",
  "topParams": "top",
  "touchedAnySpriteParams": "touchedAnySprite",
  "touchedSpriteParams": "touchedSprite",
  "translationParams": "translation",
  "troubleshootingMenuItem": "Troubleshooting",
  "turnRatioParams": "turnRatio",
  "tutorialsMenuItem": "Tutorials",
  "twitterComponentPallette": "Twitter",
  "typeParams": "type",
  "unableToCompile": "App Inventor is unable to compile this project.  <br /> The compiler error output was <br /> {0}.",
  "unexpectedProblem": "A problem occurred while loading this project. {0}",
  "uninitializedComponentPallette": "Uninitialized",
  "unknownMapTypeException": "Unexpected map type: {0}",
  "unspecifiedScreenOrientation": "Unspecified",
  "updateGalleryAppButton": "Update Gallery App",
  "upgradeDetailLoggerReplacedWithNotifier": "The Logger component named {0} was changed to a Notifier component.# Description: Error message displayed when a server error occurs during upload keystore",
  "uploadKeystoreError": "Server error: could not upload your keystore file.",
  "uploadKeystoreMenuItem": "Import keystore",
  "uriParams": "uri",
  "urlImportWizardCaption": "Import Media from URL",
  "urlParams": "url",
  "usbMenuItem": "USB",
  "useBrakeParams": "useBrake",
  "useCenterParams": "useCenter",
  "useCompanion": "Use Companion: {0} or {1}",
  "useDefault": "Use Default",
  "useFrontDeprecated": "The useFront property has been removed from your Camera Component",
  "userIdLabel": "User id or email (case-sensitive):",
  "userInterfaceComponentPallette": "User Interface",
  "userParams": "user",
  "userProfileBoxCaption": "User Profile",
  "userScreenOrientation": "User",
  "uuidParams": "uuid",
  "valueFromWebDBParams": "valueFromWebDB",
  "valueIfTagNotThereParams": "valueIfTagNotThere",
  "valueNotInRange": "The given value {0} was not in the expected range [{1}, {2}].",
  "valueParams": "value",
  "valueToAddParams": "valueToAdd",
  "valueToStoreParams": "valueToStore",
  "valuesParams": "values",
  "verticalAlignmentChoiceBottom": "Bottom",
  "verticalAlignmentChoiceCenter": "Center",
  "verticalAlignmentChoiceTop": "Top",
  "verticalArrangementComponentPallette": "VerticalArrangement",
  "verticalScrollArrangementComponentPallette": "VerticalScrollArrangement",
  "veryOldProject": "This project was saved with an early pre-release version of the App Inventor system. We will attempt to load the project, but there may be compatibility issues.",
  "videoPlayerComponentPallette": "VideoPlayer",
  "viewerBoxCaption": "Viewer",
  "volumeParams": "volume",
  "votingComponentPallette": "Voting",
  "waitingForBarcode": "Waiting for the barcode.",
  "walkStepsParams": "walkSteps",
  "warningDialogTitle": "Warning!",
  "weakAccelerometerSensitivity": "weak",
  "webComponentPallette": "Web",
  "webViewerComponentPallette": "WebViewer",
  "weeksParams": "weeks",
  "whiteColor": "White",
  "whitespaceProjectNameError": "Project names cannot contain spaces",
  "widthParams": "width",
  "widthPropertyCaption": "Width",
  "wildcardParams": "wildcard",
  "wrongNumberProjectSelectedForPublishOrUpdate": "Please select only one project to publish or update",
  "wrongNumberProjectsSelected": "One project must be selected.",
  "x1Params": "x1",
  "x2Params": "x2",
  "xAccelParams": "xAccel",
  "xAngularVelocityParams": "xAngularVelocity",
  "xParams": "x",
  "xmlTextDecodeMethods": "XmlTextDecode",
  "xmlTextParams": "xmlText",
  "xvelParams": "xvel",
  "y1Params": "y1",
  "y2Params": "y2",
  "yAccelParams": "yAccel",
  "yAngularVelocityParams": "yAngularVelocity",
  "yParams": "y",
  "yailGenerationError": "Error generating Yail for screen {0}: {1}. Please fix and try packaging again.",
  "yandexTranslateComponentPallette": "YandexTranslate",
  "yearParams": "year",
  "yearsParams": "years",
  "yellowColor": "Yellow",
  "yvelParams": "yvel",
  "zAccelParams": "zAccel",
  "zAngularVelocityParams": "zAngularVelocity",
  "zoomParams": "zoom",
  "zoomScreenAnimation": "Zoom"
}
